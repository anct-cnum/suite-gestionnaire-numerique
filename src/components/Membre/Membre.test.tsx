import { fireEvent, render, screen, within } from '@testing-library/react'

import Membre from './Membre'
import { matchWithoutMarkup } from '../testHelper'
import { membrePresenter } from '@/presenters/membrePresenter'

describe('membre', () => {
  it('quand j’affiche la page d’un membre, alors les informations du membre s’affichent', () => {
    // WHEN
    render(<Membre viewModel={membrePresenter('69')} />)

    // THEN
    const titre = screen.getByRole('heading', { level: 1, name: 'CC des Monts du Lyonnais' })
    expect(titre).toBeInTheDocument()
    const edition = screen.getByText('Modifiée le 23/11/2024 par Lucie Bruno', { selector: 'p' })
    expect(edition).toBeInTheDocument()
    const sousTitreRole1 = screen.getAllByText('Co-porteur', { selector: 'p' })
    expect(sousTitreRole1[0]).toBeInTheDocument()
    const sousTitreRole2 = screen.getAllByText('Co-financeur', { selector: 'p' })
    expect(sousTitreRole2[0]).toBeInTheDocument()

    const sectionIdentite = screen.getByRole('region', { name: 'Identité' })
    const enTeteIdentite = within(sectionIdentite).getByRole('banner')
    const titreIdentite = within(enTeteIdentite).getByRole('heading', { level: 2, name: 'Identité' })
    expect(titreIdentite).toBeInTheDocument()
    const articleIdentite = within(sectionIdentite).getByRole('article', { name: 'Identité' })
    const listeIdentite = within(articleIdentite).getByRole('list', { name: 'Identité' })
    const termesIdentite = within(listeIdentite).getAllByRole('term')
    const definitionsIdentite = within(listeIdentite).getAllByRole('definition')
    const libelleRaisonSociale = within(termesIdentite[0]).getByText('Raison sociale')
    expect(libelleRaisonSociale).toBeInTheDocument()
    const raisonSociale = within(definitionsIdentite[0]).getByText('CC des Monts du Lyonnais')
    expect(raisonSociale).toBeInTheDocument()
    const libelleTypologie = within(termesIdentite[1]).getByText('Typologie')
    expect(libelleTypologie).toBeInTheDocument()
    const typologie = within(definitionsIdentite[1]).getByText('Collectivité, EPCI')
    expect(typologie).toBeInTheDocument()
    const libelleSiret = within(termesIdentite[2]).getByText('Numéro de SIRET')
    expect(libelleSiret).toBeInTheDocument()
    const lienSiret = within(definitionsIdentite[2]).getByRole('link', { name: '79227291600034' })
    expect(lienSiret).toHaveAttribute('href', 'https://annuaire-entreprises.data.gouv.fr/etablissement/79227291600034')
    expect(lienSiret).toOpenInNewTab('Fiche CC des Monts du Lyonnais')
    const libelleIdentifiant = within(termesIdentite[3]).getByText('Identifiant')
    expect(libelleIdentifiant).toBeInTheDocument()
    const identifiant = within(definitionsIdentite[3]).getByText('#7889')
    expect(identifiant).toBeInTheDocument()
    const libelleAdresse = within(termesIdentite[4]).getByText('Adresse de l’établissement')
    expect(libelleAdresse).toBeInTheDocument()
    const adresse = within(definitionsIdentite[4]).getByText('201 bis rue de la plaine, 69000 Lyon')
    expect(adresse).toBeInTheDocument()
    const libelleRegion = within(termesIdentite[5]).getByText('Région')
    expect(libelleRegion).toBeInTheDocument()
    const region = within(definitionsIdentite[5]).getByText('Auvergne Rhône-Alpes')
    expect(region).toBeInTheDocument()
    const libelleDepartement = within(termesIdentite[6]).getByText('Département')
    expect(libelleDepartement).toBeInTheDocument()
    const departement = within(definitionsIdentite[6]).getByText('Rhône')
    expect(departement).toBeInTheDocument()
    const complementIdentite = within(articleIdentite).getByRole('complementary')
    const sourceDeDonnees = within(complementIdentite).getByText(matchWithoutMarkup('Source de données : Annuaire des entreprises'), { selector: 'p' })
    expect(sourceDeDonnees).toBeInTheDocument()
    const lienAnnuaire = within(complementIdentite).getByRole('link', { name: 'Annuaire des entreprises' })
    expect(lienAnnuaire).toHaveAttribute('href', 'https://annuaire-entreprises.data.gouv.fr/')
    expect(lienAnnuaire).toOpenInNewTab('Annuaire des entreprises')

    const sectionContact = screen.getByRole('region', { name: 'Contact référent' })
    const enTeteContact = within(sectionContact).getByRole('banner')
    const titreContact = within(enTeteContact).getByRole('heading', { level: 2, name: 'Contact référent' })
    expect(titreContact).toBeInTheDocument()
    const boutonModifier = within(enTeteContact).getByRole('button', { name: 'Modifier' })
    expect(boutonModifier).toHaveAttribute('type', 'button')
    const articleContact = within(sectionContact).getByRole('article', { name: 'Contact référent' })
    const listeContact = within(articleContact).getByRole('list', { name: 'Contact référent' })
    const termesContact = within(listeContact).getAllByRole('term')
    const definitionsContact = within(listeContact).getAllByRole('definition')
    const libelleNom = within(termesContact[0]).getByText('Nom')
    expect(libelleNom).toBeInTheDocument()
    const nom = within(definitionsContact[0]).getByText('Durant')
    expect(nom).toBeInTheDocument()
    const libellePrenom = within(termesContact[1]).getByText('Prénom')
    expect(libellePrenom).toBeInTheDocument()
    const prenom = within(definitionsContact[1]).getByText('Didier')
    expect(prenom).toBeInTheDocument()
    const libelleTelephone = within(termesContact[2]).getByText('Téléphone professionnel')
    expect(libelleTelephone).toBeInTheDocument()
    const telephone = within(definitionsContact[2]).getByText('0102030405')
    expect(telephone).toBeInTheDocument()
    const libelleEmail = within(termesContact[3]).getByText('Adresse électronique')
    expect(libelleEmail).toBeInTheDocument()
    const email = within(definitionsContact[3]).getByText('didier.durand@example.com')
    expect(email).toBeInTheDocument()
    const libelleFonction = within(termesContact[4]).getByText('Fonction')
    expect(libelleFonction).toBeInTheDocument()
    const fonction = within(definitionsContact[4]).getByText('Directeur')
    expect(fonction).toBeInTheDocument()

    const sectionRole = screen.getByRole('region', { name: 'Rôle' })
    const enTeteRole = within(sectionRole).getByRole('banner')
    const titreRole = within(enTeteRole).getByRole('heading', { level: 2, name: 'Rôle' })
    expect(titreRole).toBeInTheDocument()
    const articleRole = within(sectionRole).getByRole('article', { name: 'Rôle' })
    const listeRole = within(articleRole).getByRole('list', { name: 'Rôle' })
    const termesRole = within(listeRole).getAllByRole('term')
    const definitionsRole = within(listeRole).getAllByRole('definition')
    const libelleRole = within(termesRole[0]).getByText('Rôle dans la gouvernance')
    expect(libelleRole).toBeInTheDocument()
    const role1 = within(definitionsRole[0]).getByText('Co-porteur', { selector: 'p' })
    expect(role1).toBeInTheDocument()
    const role2 = within(definitionsRole[0]).getByText('Co-financeur', { selector: 'p' })
    expect(role2).toBeInTheDocument()
    const libelleDepuisLe = within(termesRole[1]).getByText('Membre depuis le')
    expect(libelleDepuisLe).toBeInTheDocument()
    const depuisLe = within(definitionsRole[1]).getByText('22/03/2024')
    expect(depuisLe).toBeInTheDocument()
    const libelleFeuilleDeRoute = within(termesRole[2]).getByText('Feuille de route')
    expect(libelleFeuilleDeRoute).toBeInTheDocument()
    const lienFeuilleDeRoute1 = within(definitionsRole[2]).getByRole('link', { name: 'Feuille de route inclusion' })
    expect(lienFeuilleDeRoute1).toHaveAttribute('href', '/gouvernance/69/feuille-de-route/113')
    const lienFeuilleDeRoute2 = within(definitionsRole[2]).getByRole('link', { name: 'Feuille de route numérique du Rhône' })
    expect(lienFeuilleDeRoute2).toHaveAttribute('href', '/gouvernance/69/feuille-de-route/114')

    const sectionConventionsEtFinancements = screen.getByRole('region', { name: 'Conventions et financements' })
    const enTeteConventionsEtFinancements = within(sectionConventionsEtFinancements).getByRole('banner')
    const titreConventionsEtFinancements = within(enTeteConventionsEtFinancements).getByRole('heading', { level: 2, name: 'Conventions et financements' })
    expect(titreConventionsEtFinancements).toBeInTheDocument()
    const sousTitreConventionsEtFinancements = within(enTeteConventionsEtFinancements).getByText('Conventions et montant des financements engagés par l’état pour ce membre.', { selector: 'p' })
    expect(sousTitreConventionsEtFinancements).toBeInTheDocument()
    const lienGererConventions = within(enTeteConventionsEtFinancements).getByRole('link', { name: 'Gérer les conventions' })
    expect(lienGererConventions).toHaveAttribute('href', '/')
    const articleFinancements = within(sectionConventionsEtFinancements).getByRole('article', { name: 'Financements' })
    const listeFinancements = within(articleFinancements).getByRole('list', { name: 'Financements' })
    const termesFinancements = within(listeFinancements).getAllByRole('term')
    const definitionsFinancements = within(listeFinancements).getAllByRole('definition')
    const libelleCreditEtat = within(termesFinancements[0]).getByText('Crédits engagés par l’état')
    expect(libelleCreditEtat).toBeInTheDocument()
    const creditEtat = within(definitionsFinancements[0]).getByText(matchWithoutMarkup('145 000 €'))
    expect(creditEtat).toBeInTheDocument()
    const libelleRenouvellement = within(termesFinancements[1]).getByText('Conseiller Numérique - Renouvellement - État')
    expect(libelleRenouvellement).toBeInTheDocument()
    const renouvellement = within(definitionsFinancements[1]).getByText(matchWithoutMarkup('100 000 €'))
    expect(renouvellement).toBeInTheDocument()
    const libelleFranceRelance = within(termesFinancements[2]).getByText('Conseiller Numérique - Plan France Relance - État')
    expect(libelleFranceRelance).toBeInTheDocument()
    const franceRelance = within(definitionsFinancements[2]).getByText(matchWithoutMarkup('25 000 €'))
    expect(franceRelance).toBeInTheDocument()
    const libelleFormations = within(termesFinancements[3]).getByText('Formations Aidants Connect Plan France Relance - 2021/2023 - Etat')
    expect(libelleFormations).toBeInTheDocument()
    const formations = within(definitionsFinancements[3]).getByText(matchWithoutMarkup('20 000 €'))
    expect(formations).toBeInTheDocument()
    const articleConventions = within(sectionConventionsEtFinancements).getByRole('article', { name: 'Conventions' })
    const titreConventions = within(articleConventions).getByText('Conventions')
    expect(titreConventions).toBeInTheDocument()
    const menuConventions = within(articleConventions).getByRole('list', { name:'Conventions' })
    const menuItemsConventions = within(menuConventions).getAllByRole('listitem')
    expect(menuItemsConventions).toHaveLength(4)
    const lienConvention1 = within(menuItemsConventions[0]).getByRole('link', { name: 'Télécharger' })
    expect(lienConvention1).toHaveAttribute('href', '/')
    expect(lienConvention1).toHaveAttribute('title', 'Télécharger Convention CC des Monts du Lyonnais')
    const titreDocuments = within(menuItemsConventions[0]).getByText('2 documents associés')
    expect(titreDocuments).toBeInTheDocument()
    const menuDocuments = within(menuItemsConventions[0]).getByRole('list')
    const menuItemsDocuments = within(menuDocuments).getAllByRole('listitem')
    expect(menuItemsDocuments).toHaveLength(2)
    expect(menuItemsDocuments[0].textContent).toBe('Contrat de travail 220925 En coursPaul Durant, CDD, Expire le 23/09/2025')
    const lienConseiller1 = within(menuItemsDocuments[0]).getByRole('link', { name: 'Paul Durant' })
    expect(lienConseiller1).toHaveAttribute('href', '/')
    const lienDocument1 = within(menuItemsDocuments[0]).getByRole('link', { name: 'Télécharger Contrat de travail 220925' })
    expect(lienDocument1).toHaveAttribute('href', '/')
    expect(lienDocument1).toHaveAttribute('title', 'Télécharger Contrat de travail 220925')
    expect(menuItemsDocuments[1].textContent).toBe('Contrat de travail 220923 ExpiréePaul Durand, CDD, Expire le 23/09/2025')
    const lienConseiller2 = within(menuItemsDocuments[1]).getByRole('link', { name: 'Paul Durand' })
    expect(lienConseiller2).toHaveAttribute('href', '/')
    const lienDocument2 = within(menuItemsDocuments[1]).getByRole('link', { name: 'Télécharger Contrat de travail 220923' })
    expect(lienDocument2).toHaveAttribute('href', '/')
    expect(lienDocument2).toHaveAttribute('title', 'Télécharger Contrat de travail 220923')
    const menuItemsTitre2 = within(menuItemsConventions[3]).getByText(matchWithoutMarkup('Avenant mai 2024 En coursExpire le 01/11/2027Télécharger'), { selector: 'li' })
    expect(menuItemsTitre2).toBeInTheDocument()
    const lienConvention2 = within(menuItemsConventions[3]).getByRole('link', { name: 'Télécharger' })
    expect(lienConvention2).toHaveAttribute('href', '/')
    expect(lienConvention2).toHaveAttribute('title', 'Télécharger Avenant mai 2024')

    const sectionAidantsEtMediateurs = screen.getByRole('region', { name: 'Aidants et médiateurs' })
    const enTeteAidantsEtMediateurs = within(sectionAidantsEtMediateurs).getByRole('banner')
    const titreAidantsEtMediateurs = within(enTeteAidantsEtMediateurs).getByRole('heading', { level: 2, name: 'Aidants et médiateurs' })
    expect(titreAidantsEtMediateurs).toBeInTheDocument()
    const lienGererAidants = within(enTeteAidantsEtMediateurs).getByRole('link', { name: 'Gérer les aidants et médiateurs' })
    expect(lienGererAidants).toHaveAttribute('href', '/aidants-et-mediateurs')
    const sousTitreAidantsEtMediateurs = within(enTeteAidantsEtMediateurs).getByText('Ressources humaines dédiés à l’inclusion numérique portés par la structure.', { selector: 'p' })
    expect(sousTitreAidantsEtMediateurs).toBeInTheDocument()
    const nombreCoodinateurs = within(enTeteAidantsEtMediateurs).getByText(matchWithoutMarkup('1 Coordinateur'), { selector: 'p' })
    expect(nombreCoodinateurs).toBeInTheDocument()
    const nombreMediateurs = within(enTeteAidantsEtMediateurs).getByText(matchWithoutMarkup('4 Médiateurs numériques'), { selector: 'p' })
    expect(nombreMediateurs).toBeInTheDocument()
    const nombreAidants = within(enTeteAidantsEtMediateurs).getByText(matchWithoutMarkup('6 Aidants numériques'), { selector: 'p' })
    expect(nombreAidants).toBeInTheDocument()
    const articleAidantsEtMediateurs = within(sectionAidantsEtMediateurs).getByRole('article', { name: 'Aidants et médiateurs' })
    const menuAidantsEtMediateurs = within(articleAidantsEtMediateurs).getByRole('list')
    const menuItemsAidantsEtMediateurs = within(menuAidantsEtMediateurs).getAllByRole('listitem')
    expect(menuItemsAidantsEtMediateurs).toHaveLength(3)
    const lienAidants1 = within(menuItemsAidantsEtMediateurs[0]).getByRole('link', { name: matchWithoutMarkup('Martin DuboisCoordinateur, Médiateur numérique') })
    expect(lienAidants1).toHaveAttribute('href', '/')
    const lienAidants2 = within(menuItemsAidantsEtMediateurs[1]).getByRole('link', { name: matchWithoutMarkup('Marc-Olivier GagnonMédiateur numérique, Conseiller numérique, Aidant numérique, Aidants Connect') })
    expect(lienAidants2).toHaveAttribute('href', '/')
    const lienAidants3 = within(menuItemsAidantsEtMediateurs[2]).getByRole('link', { name: matchWithoutMarkup('Philippe MorinMédiateur numérique, Aidant numérique') })
    expect(lienAidants3).toHaveAttribute('href', '/')
    const complementAidantsEtMediateurs = within(articleAidantsEtMediateurs).getByRole('complementary')
    const lienSourceDeDonnees = within(complementAidantsEtMediateurs).getByRole('link', { name: 'La Coop de la médiation numérique' })
    expect(lienSourceDeDonnees).toHaveAttribute('href', 'https://coop-numerique.anct.gouv.fr/')
    expect(lienSourceDeDonnees).toOpenInNewTab('La Coop de la médiation numérique')

    const sectionHistorique = screen.getByRole('region', { name: 'Historique des dernières actions' })
    const enTeteHistorique = within(sectionHistorique).getByRole('banner')
    const titreHistorique = within(enTeteHistorique).getByRole('heading', { level: 2, name: 'Historique des dernières actions' })
    expect(titreHistorique).toBeInTheDocument()
    const sousTitreHistorique = within(enTeteHistorique).getByText('Historique des dernières actions effectuées pour ce membre.', { selector: 'p' })
    expect(sousTitreHistorique).toBeInTheDocument()
    const activiteEtHistorique = within(sectionHistorique).getByRole('table', { name: 'Historique des dernières actions' })
    const [head, body] = within(activiteEtHistorique).getAllByRole('rowgroup')
    const rowHead = within(head).getByRole('row')
    const columnsHead = within(rowHead).getAllByRole('columnheader')
    expect(columnsHead).toHaveLength(3)
    expect(columnsHead[0].textContent).toBe('Date')
    expect(columnsHead[0]).toHaveAttribute('scope', 'col')
    expect(columnsHead[1].textContent).toBe('Activité')
    expect(columnsHead[1]).toHaveAttribute('scope', 'col')
    expect(columnsHead[2].textContent).toBe('Éditeur')
    expect(columnsHead[2]).toHaveAttribute('scope', 'col')
    const rowsBody = within(body).getAllByRole('row')
    const columns1Body = within(rowsBody[0]).getAllByRole('cell')
    expect(columns1Body).toHaveLength(3)
    expect(columns1Body[0].textContent).toBe('23/02/2025')
    expect(columns1Body[1].textContent).toBe('1 poste rendu')
    expect(columns1Body[2].textContent).toBe('Par Laetitia Henrich')
    const columns2Body = within(rowsBody[1]).getAllByRole('cell')
    expect(columns2Body).toHaveLength(3)
    expect(columns2Body[0].textContent).toBe('23/02/2024')
    expect(columns2Body[1].textContent).toBe('Feuille de route modifiée')
    expect(columns2Body[2].textContent).toBe('Par Laetitia Henrich')
    const columns3Body = within(rowsBody[2]).getAllByRole('cell')
    expect(columns3Body).toHaveLength(3)
    expect(columns3Body[0].textContent).toBe('23/02/2023')
    expect(columns3Body[1].textContent).toBe('Note de contexte modifiée')
    expect(columns3Body[2].textContent).toBe('Par Emilie Dubois')
  })

  it('quand j’affiche la page d’un membre, alors le sommaire s’affiche', () => {
    // WHEN
    render(<Membre viewModel={membrePresenter('69')} />)

    // THEN
    const navigation = screen.getByRole('navigation', { name: 'Sommaire' })
    const sommaire = within(navigation).getByRole('list')
    const sommaireItems = within(sommaire).getAllByRole('listitem')
    expect(sommaireItems).toHaveLength(6)
    const identite = within(sommaireItems[0]).getByRole('link', { current: 'page', name: 'Identité' })
    expect(identite).toHaveAttribute('href', '#identite')
    const contact = within(sommaireItems[1]).getByRole('link', { name: 'Contact référent' })
    expect(contact).toHaveAttribute('href', '#contact')
    const role = within(sommaireItems[2]).getByRole('link', { name: 'Rôle' })
    expect(role).toHaveAttribute('href', '#roleMembre')
    const conventions = within(sommaireItems[3]).getByRole('link', { name: 'Conventions et financements' })
    expect(conventions).toHaveAttribute('href', '#conventionsEtFinancements')
    const aidants = within(sommaireItems[4]).getByRole('link', { name: 'Aidants et médiateurs' })
    expect(aidants).toHaveAttribute('href', '#aidantsEtMediateurs')
    const historique = within(sommaireItems[5]).getByRole('link', { name: 'Historique des dernières actions' })
    expect(historique).toHaveAttribute('href', '#historique')
  })

  it('quand je clique sur un élément du sommaire, alors ce dernier est mis en valeur', () => {
    // GIVEN
    render(<Membre viewModel={membrePresenter('69')} />)

    // WHEN
    const navigation = screen.getByRole('navigation', { name: 'Sommaire' })
    const sommaire = within(navigation).getByRole('list')
    const sommaireItems = within(sommaire).getAllByRole('listitem')
    const conventions = within(sommaireItems[3]).getByRole('link', { name: 'Conventions et financements' })
    fireEvent.click(conventions)

    // THEN
    expect(conventions).toHaveAttribute('aria-current', 'page')
  })
})
