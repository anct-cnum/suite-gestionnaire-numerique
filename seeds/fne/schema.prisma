generator client {
  provider = "prisma-client-js"
  output   = "./client-fne"
}

datasource db {
  provider = "postgresql"
  url      = env("FNE_DATABASE_URL")
}

// Les models ci-dessous sont copiés/collés du projet inclusion-numerique en fonction de nos besoin de migrations.
// Les models sont suffixés par "FNE" pour les distinguer des notres.

model AccountFNE {
  id       String @id @default(cuid())
  id_token String @db.Text
  userId   String @map("user_id") @db.Uuid

  user UserFNE @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model UserFNE {
  id        String       @id @default(uuid()) @db.Uuid
  accounts  AccountFNE[]
  created   DateTime     @default(now())
  email     String       @unique
  firstName String?      @map("first_name")
  lastName  String?      @map("last_name")
  role      UserRoleFNE  @default(User)
  roleScope String?      @map("role_scope")

  gouvernancesCrees                 Gouvernance[] @relation("gouvernancesCrees")
  gouvernancesDernierementModifiees Gouvernance[] @relation("gouvernancesDernierementModifiees")

  @@map("users")
}

model Gouvernance {
  id                              String    @id
  userCreateurId                  String    @map("createur_id")
  departementCode                 String    @map("departement_code")
  userDerniereModificationId      String    @map("derniere_modification_par_id")
  modification                    DateTime
  suppression                     DateTime? @map("supression")
  noteDeContexte                  String    @map("note_de_contexte")
  beneficiaireDotationFormationId String?   @map("beneficiaire_dotation_formation_id")
  enregistree                     DateTime? @map("v2_enregistree")

  relationUserCreateur                  UserFNE            @relation("gouvernancesCrees", fields: [userCreateurId], references: [id])
  relationUserDerniereModification      UserFNE            @relation("gouvernancesDernierementModifiees", fields: [userDerniereModificationId], references: [id])
  relationBeneficiaireDotationFormation MembreGouvernance? @relation("beneficiaireDotationFormation", fields: [beneficiaireDotationFormationId], references: [id])

  comites         Comite[]
  feuillesDeRoute FeuilleDeRoute[]
  membres         MembreGouvernance[]

  @@map("gouvernances")
}

model Comite {
  id                 String          @id
  gouvernanceId      String          @map("gouvernance_id")
  creation           DateTime
  modification       DateTime
  type               TypeComite      @default(autre)
  typeAutrePrecision String?         @map("type_autre_precisions")
  frequence          FrequenceComite @default(annuelle)
  commentaire        String?

  relationGouvernance Gouvernance @relation(fields: [gouvernanceId], references: [id])

  @@map("comite_gouvernance")
}

model FeuilleDeRoute {
  id                          String        @id
  gouvernanceId               String        @map("gouvernance_id")
  creation                    DateTime
  modification                DateTime
  nom                         String
  contratPreexistant          Boolean       @map("contrat_preexistant")
  typeContrat                 type_contrat? @map("type_contrat")
  typeContratAutreDescription String?       @map("type_contrat_autre_description")
  perimetreRegionCode         String?       @map("perimetre_region_code")
  perimetreDepartmentCode     String?       @map("perimetre_departement_code")
  pieceJointe                 String?       @map("piece_jointe")

  relationGouvernance   Gouvernance            @relation(fields: [gouvernanceId], references: [id])
  membresFeuilleDeRoute MembreFeuilleDeRoute[]

  @@map("feuille_de_route")
}

model MembreFeuilleDeRoute {
  id               String                   @id
  modification     DateTime
  creation         DateTime
  feuilleDeRouteId String                   @map("feuille_de_route_id")
  membreId         String                   @map("membre_id")
  role             RoleMembreFeuilleDeRoute

  relationFeuilleDeRoute    FeuilleDeRoute    @relation(fields: [feuilleDeRouteId], references: [id])
  relationMembreGouvernance MembreGouvernance @relation(fields: [membreId], references: [id])

  @@map("membre_feuille_de_route")
}

model FormulaireGouvernance {
  id                 String  @id
  contactPolitiqueId String? @map("contact_politique_id")
  contactStructureId String? @map("contact_structure_id")
  contactTechniqueId String? @map("contact_technique_id")

  creation         DateTime
  modification     DateTime
  regionCode       String?   @map("region_code")
  departementCode  String?   @map("departement_code")
  epciCode         String?   @map("epci_code")
  nomStructure     String?   @map("nom_structure")
  siret            String?   @map("siret_structure")
  communeCode      String?   @map("commune_code")
  confirmeEtEnvoye DateTime? @map("confirme_et_envoye")
  persona          String    @map("gouvernance_persona")

  relationContactPolitique ContactFormulaireGouvernance? @relation("contactPolitique", fields: [contactPolitiqueId], references: [id])
  relationContactStructure ContactFormulaireGouvernance? @relation("contactStructure", fields: [contactStructureId], references: [id])
  relationContactTechnique ContactFormulaireGouvernance? @relation("contactTechnique", fields: [contactTechniqueId], references: [id])
  relationEpci             Epci?                         @relation(fields: [epciCode], references: [code])
  relationInformationSiret InformationSiret?             @relation(fields: [siret], references: [siret])
  relationCommune          Commune?                      @relation(fields: [communeCode], references: [code])
  relationRegion           Region?                       @relation(fields: [regionCode], references: [code])

  membresGouvernance MembreGouvernance[]

  @@map("formulaire_gouvernance")
}

model MembreGouvernance {
  id                      String @id
  formulaireGouvernanceId String @map("formulaire_gouvernance_id")

  gouvernanceId   String   @map("gouvernance_id")
  creation        DateTime
  modification    DateTime
  regionCode      String?  @map("region_code")
  departementCode String?  @map("departement_code")
  epciCode        String?  @map("epci_code")
  nomStructure    String?  @map("nom_structure")
  siret           String?
  coporteur       Boolean
  communeCode     String?  @map("commune_code")

  relationGouvernance           Gouvernance           @relation(fields: [gouvernanceId], references: [id])
  relationEpci                  Epci?                 @relation(fields: [epciCode], references: [code])
  relationInformationSiret      InformationSiret?     @relation(fields: [siret], references: [siret])
  relationCommune               Commune?              @relation(fields: [communeCode], references: [code])
  relationFormulaireGouvernance FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id])

  gouvernanceDotationFormation Gouvernance[]            @relation("beneficiaireDotationFormation")
  beneficiairesSubventions     BeneficiaireSubvention[]
  membresFeuilleDeRoute        MembreFeuilleDeRoute[]

  @@map("membre_gouvernance")
}

model ContactFormulaireGouvernance {
  id String @id

  formulaireGouvernanceId String @map("formulaire_gouvernance_id")
  nom                     String
  prenom                  String
  fonction                String
  email                   String

  formulairesGouvernanceContactPolitique FormulaireGouvernance[] @relation("contactPolitique")
  formulairesGouvernanceContactTechnique FormulaireGouvernance[] @relation("contactTechnique")
  formulairesGouvernanceContactStructure FormulaireGouvernance[] @relation("contactStructure")

  @@map("contact_formulaire_gouvernance")
}

model Region {
  code String @id
  nom  String

  departements           Departement[]
  formulairesGouvernance FormulaireGouvernance[]

  @@map("regions")
}

model Departement {
  code       String @id
  nom        String
  codeRegion String @map("code_region")

  relationRegion Region @relation(fields: [codeRegion], references: [code])

  @@map("departements")
}

model Epci {
  code String @id
  nom  String

  membresGouvernance     MembreGouvernance[]
  formulairesGouvernance FormulaireGouvernance[]
  communes               Commune[]

  @@map("epcis")
}

model Commune {
  code            String @id
  nom             String
  codeDepartement String @map("code_departement")
  codeEpci        String @map("code_epci")

  relationEpci Epci @relation(fields: [codeEpci], references: [code])

  membresGouvernance    MembreGouvernance[]
  formulaireGouvernance FormulaireGouvernance[]

  @@map("communes")
}

model InformationSiret {
  siret          String  @id
  nom            String?
  formeJuridique String? @map("forme_juridique_libelle")

  membreGouvernance     MembreGouvernance[]
  formulaireGouvernance FormulaireGouvernance[]

  @@map("informations_siret")
}

model BeneficiaireSubvention {
  id String @id

  demandeDeSubventionId String @map("demande_de_subvention_id")
  membreGouvernanceId   String @map("membre_gouvernance_id")

  relationMembreGouvernance   MembreGouvernance   @relation(fields: [membreGouvernanceId], references: [id])
  relationDemandeDeSubvention DemandeDeSubvention @relation(fields: [demandeDeSubventionId], references: [id])

  @@map("beneficiaire_subvention")
}

model DemandeDeSubvention {
  id String @id

  acceptee DateTime?

  beneficiairesSubventions BeneficiaireSubvention[]

  @@map("demande_de_subvention")
}

enum UserRoleFNE {
  Administrator         @map("administrator")
  Demo                  @map("demo")
  PrefectureDepartement @map("prefecture_departement")
  PrefectureRegion      @map("prefecture_region")
  User                  @map("user")

  @@map("user_role")
}

enum TypeComite {
  strategique
  technique
  consultatif
  autre
}

enum FrequenceComite {
  mensuelle
  trimestrielle
  semestrielle
  annuelle
}

enum perimetre_gouvernance {
  autre
  departement
  epci
  region
}

enum type_contrat {
  crte
  sdaasap
  sdin
  sdun
  autre
}

enum RoleMembreFeuilleDeRoute {
  porteur

  @@map("role_membre_feuille_de_route")
}
