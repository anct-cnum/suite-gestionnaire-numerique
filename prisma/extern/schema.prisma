generator client {
  provider        = "prisma-client-js"
  output          = "../../generated/client-extern"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("EXTERN_DATABASE_URL")
  schemas  = ["admin", "main", "min", "reference"]
}

model commune {
  id             Int                     @id @default(autoincrement())
  geom           Unsupported("geometry")
  departement_id Int
  statut         String?                 @db.VarChar(24)
  code_insee     String                  @unique(map: "commune_ukey") @db.VarChar(5)
  nom            String                  @db.VarChar(50)
  population     Int?
  created_at     DateTime?               @default(now()) @db.Timestamp(6)
  updated_at     DateTime?               @db.Timestamp(6)
  departement    admin_departement       @relation(fields: [departement_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_departement_id")
  commune_epci   commune_epci[]
  zonage         zonage[]

  @@index([geom], type: Gist)
  @@index([nom])
  @@schema("admin")
}

model commune_epci {
  id         Int       @id @default(autoincrement())
  commune_id Int
  epci_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  commune    commune   @relation(fields: [commune_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_epci_commune_id")
  epci       epci      @relation(fields: [epci_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_epci_epci_id")

  @@unique([commune_id, epci_id], map: "commune_epci_ukey")
  @@schema("admin")
}

model admin_departement {
  id         Int                     @id @default(autoincrement())
  geom       Unsupported("geometry")
  region_id  Int
  code       String                  @unique(map: "departement_ukey") @db.VarChar(3)
  nom        String                  @db.VarChar(30)
  created_at DateTime?               @default(now()) @db.Timestamp(6)
  updated_at DateTime?               @db.Timestamp(6)
  commune    commune[]
  region     admin_region            @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "departement_region_id")

  @@map("departement")
  @@schema("admin")
}

model epci {
  id           Int                     @id @default(autoincrement())
  geom         Unsupported("geometry")
  code         String                  @unique(map: "epci_ukey") @db.VarChar(9)
  type         String                  @db.VarChar(32)
  nom          String                  @db.VarChar(90)
  created_at   DateTime?               @default(now()) @db.Timestamp(6)
  updated_at   DateTime?               @db.Timestamp(6)
  commune_epci commune_epci[]

  @@schema("admin")
}

model insee_cp {
  id          Int       @id @default(autoincrement())
  code_insee  String    @db.VarChar(5)
  code_postal String    @db.VarChar(5)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  @@unique([code_postal, code_insee], map: "insee_cp_ukey")
  @@schema("admin")
}

model insee_historique {
  id                 Int       @id @default(autoincrement())
  code_insee_ancien  String    @db.VarChar(5)
  code_insee_nouveau String    @db.VarChar(5)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)

  @@unique([code_insee_ancien, code_insee_nouveau], map: "insee_historique_ukey")
  @@schema("admin")
}

model admin_region {
  id          Int                     @id @default(autoincrement())
  geom        Unsupported("geometry")
  code        String                  @unique(map: "region_ukey") @db.VarChar(2)
  nom         String                  @db.VarChar(35)
  created_at  DateTime?               @default(now()) @db.Timestamp(6)
  updated_at  DateTime?               @db.Timestamp(6)
  departement admin_departement[]

  @@map("region")
  @@schema("admin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model zonage {
  id          Int                      @id @default(autoincrement())
  code        String?                  @unique(map: "zonage_code_ukey") @db.VarChar(8)
  libelle     String?                  @db.VarChar(255)
  code_insee  String                   @db.VarChar(5)
  type        String                   @db.VarChar(3)
  commentaire String?
  geom        Unsupported("geometry")?
  created_at  DateTime?                @default(now()) @db.Timestamp(6)
  updated_at  DateTime?                @db.Timestamp(6)
  commune     commune                  @relation(fields: [code_insee], references: [code_insee], onDelete: NoAction, onUpdate: NoAction)

  @@index([code_insee])
  @@index([geom], type: Gist)
  @@schema("admin")
}

model zonage_log_erreur {
  id          Int       @id @default(autoincrement())
  code_insee  String?   @db.VarChar(5)
  commentaire String?
  erreur      String?
  date_erreur DateTime? @default(now()) @db.Timestamp(6)

  @@schema("admin")
}

model activites_coop {
  id                                  Int       @id @default(autoincrement())
  type                                String    @db.VarChar(100)
  mediateur_id_coop                   String    @db.Uuid
  structure_id_coop                   String?   @db.Uuid
  date                                DateTime  @db.Timestamp(6)
  duree                               Int
  lieu_code_postal                    String?   @db.VarChar(20)
  lieu_commune                        String?   @db.VarChar(255)
  lieu_code_insee                     String?   @db.VarChar(20)
  creation_coop                       DateTime? @db.Timestamp(6)
  modification_coop                   DateTime? @db.Timestamp(6)
  type_lieu                           String    @db.VarChar(100)
  autonomie                           String?   @db.VarChar(100)
  structure_de_redirection            String?   @db.VarChar(255)
  oriente_vers_structure              Boolean?
  precisions_demarche                 String?
  degre_de_finalisation_demarche      String?   @db.VarChar(50)
  titre_atelier                       String?   @db.VarChar(255)
  niveau_atelier                      String?   @db.VarChar(50)
  accompagnements                     Int       @default(0)
  thematiques                         String[]
  materiels                           String[]
  thematiques_demarche_administrative String[]
  created_at                          DateTime? @default(now()) @db.Timestamp(6)
  updated_at                          DateTime? @db.Timestamp(6)
  personne_id                         Int
  coop_id                             String?   @unique(map: "activites_coop_unique_coop_id") @db.Uuid
  personne                            personne  @relation(fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")

  @@schema("main")
}

model adresse {
  id                      Int                      @id @default(autoincrement())
  id_adresse              String?                  @unique @db.Uuid
  clef_interop            String?                  @db.VarChar(50)
  departement             String?                  @db.VarChar(3)
  code_postal             String?                  @db.VarChar(5)
  nom_commune             String?                  @db.VarChar(255)
  nom_voie                String?                  @db.VarChar(255)
  numero_voie             Int?                     @db.SmallInt
  created_at              DateTime?                @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                @db.Timestamp(6)
  geom                    Unsupported("geometry")?
  code_insee              String?                  @db.VarChar(5)
  repetition              String?                  @db.VarChar(10)
  code_ban                String?                  @db.Uuid
  additional_address_info Json?
  structure               main_structure[]

  @@unique([code_postal, nom_commune, nom_voie, numero_voie, repetition], map: "adresse_ukey")
  @@index([geom], type: Gist)
  @@schema("main")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model coordination_mediation {
  id                                                             Int      @default(autoincrement())
  coordinateur_id                                                Int
  mediateur_id                                                   Int
  coordination_id_coop                                           String   @db.Uuid
  mediateur_id_coop                                              String   @db.Uuid
  en_cours                                                       Boolean?
  personne_coordination_mediation_coordinateur_idTopersonne      personne @relation("coordination_mediation_coordinateur_idTopersonne", fields: [coordinateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_coodinateur_id")
  personne_coordination_mediation_coordination_id_coopTopersonne personne @relation("coordination_mediation_coordination_id_coopTopersonne", fields: [coordination_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_coordination_id_coop")
  personne_coordination_mediation_mediateur_idTopersonne         personne @relation("coordination_mediation_mediateur_idTopersonne", fields: [mediateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id")
  personne_coordination_mediation_mediateur_id_coopTopersonne    personne @relation("coordination_mediation_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")

  @@ignore
  @@schema("main")
}

model personne {
  id                                                                                  Int                           @id @default(autoincrement())
  prenom                                                                              String?                       @db.VarChar(50)
  nom                                                                                 String?                       @db.VarChar(50)
  telephone                                                                           String?                       @db.VarChar(20)
  id_aidant_connect                                                                   String?                       @unique(map: "unique_id_aidant_connect") @db.VarChar(50)
  id_conseiller_numerique                                                             String?                       @unique(map: "unique_id_conseiller_numerique") @db.VarChar(50)
  original_created_at                                                                 DateTime?                     @db.Timestamp(6)
  created_at                                                                          DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                                                                          DateTime?                     @db.Timestamp(6)
  is_active_ac                                                                        Boolean?
  formation_fne_ac                                                                    Boolean?
  profession_ac                                                                       String?                       @db.VarChar
  nb_accompagnements_ac                                                               Int?
  id_structure_ac                                                                     String?                       @db.Uuid
  emails                                                                              Json?
  id_cn_pg                                                                            Int?                          @unique(map: "uq_id_cn_pg")
  id_structure_tp                                                                     Int?
  coop_id                                                                             String?                       @unique @db.Uuid
  is_coordinateur                                                                     Boolean?
  is_mediateur                                                                        Boolean?
  activites_coop                                                                      activites_coop[]
  coordination_mediation_coordination_mediation_coordinateur_idTopersonne             coordination_mediation[]      @relation("coordination_mediation_coordinateur_idTopersonne") @ignore
  coordination_mediation_coordination_mediation_coordination_id_coopTopersonne        coordination_mediation[]      @relation("coordination_mediation_coordination_id_coopTopersonne") @ignore
  coordination_mediation_coordination_mediation_mediateur_idTopersonne                coordination_mediation[]      @relation("coordination_mediation_mediateur_idTopersonne") @ignore
  coordination_mediation_coordination_mediation_mediateur_id_coopTopersonne           coordination_mediation[]      @relation("coordination_mediation_mediateur_id_coopTopersonne") @ignore
  structure_personne_id_structure_tpTostructure                                       main_structure?               @relation("personne_id_structure_tpTostructure", fields: [id_structure_tp], references: [id_structure_tp], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_structure_tp")
  structure_personne_id_structure_acTostructure                                       main_structure?               @relation("personne_id_structure_acTostructure", fields: [id_structure_ac], references: [id_structure_ac], onDelete: NoAction, onUpdate: NoAction)
  personne_lieux_activites_personne_lieux_activites_mediateur_id_coopTopersonne       personne_lieux_activites[]    @relation("personne_lieux_activites_mediateur_id_coopTopersonne") @ignore
  personne_lieux_activites_personne_lieux_activites_personne_idTopersonne             personne_lieux_activites[]    @relation("personne_lieux_activites_personne_idTopersonne") @ignore
  personne_structures_emplois_personne_structures_emplois_mediateur_id_coopTopersonne personne_structures_emplois[] @relation("personne_structures_emplois_mediateur_id_coopTopersonne") @ignore
  personne_structures_emplois_personne_structures_emplois_personne_idTopersonne       personne_structures_emplois[] @relation("personne_structures_emplois_personne_idTopersonne") @ignore

  @@schema("main")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model personne_lieux_activites {
  id                                                              Int            @default(autoincrement())
  personne_id                                                     Int
  structure_id                                                    Int
  structure_id_coop                                               String         @db.Uuid
  mediateur_id_coop                                               String         @db.Uuid
  en_cours                                                        Boolean?
  structure_personne_lieux_activites_structure_idTostructure      main_structure @relation("personne_lieux_activites_structure_idTostructure", fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lieu_id")
  structure_personne_lieux_activites_structure_id_coopTostructure main_structure @relation("personne_lieux_activites_structure_id_coopTostructure", fields: [structure_id_coop], references: [structure_id_coop], onDelete: NoAction, onUpdate: NoAction, map: "fk_lieu_id_coop")
  personne_personne_lieux_activites_mediateur_id_coopTopersonne   personne       @relation("personne_lieux_activites_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")
  personne_personne_lieux_activites_personne_idTopersonne         personne       @relation("personne_lieux_activites_personne_idTopersonne", fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")

  @@ignore
  @@schema("main")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model personne_structures_emplois {
  id                                                                 Int            @default(autoincrement())
  personne_id                                                        Int
  structure_id                                                       Int
  structure_id_coop                                                  String         @db.Uuid
  mediateur_id_coop                                                  String         @db.Uuid
  en_cours                                                           Boolean?
  personne_personne_structures_emplois_mediateur_id_coopTopersonne   personne       @relation("personne_structures_emplois_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")
  personne_personne_structures_emplois_personne_idTopersonne         personne       @relation("personne_structures_emplois_personne_idTopersonne", fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")
  structure_personne_structures_emplois_structure_idTostructure      main_structure @relation("personne_structures_emplois_structure_idTostructure", fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_structure_id")
  structure_personne_structures_emplois_structure_id_coopTostructure main_structure @relation("personne_structures_emplois_structure_id_coopTostructure", fields: [structure_id_coop], references: [structure_id_coop], onDelete: NoAction, onUpdate: NoAction, map: "fk_structure_id_coop")

  @@ignore
  @@schema("main")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model poste {
  id               Int             @id @default(autoincrement())
  id_poste_conum   Int             @unique(map: "poste_unique_id_poste_conum")
  id_structure_tp  Int?
  id_cn            Int?
  typologie        String?         @db.VarChar(255)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @db.Timestamp(6)
  date_attribution DateTime        @db.Timestamp(6)
  date_rendu_poste DateTime?       @db.Timestamp(6)
  poste_renouvele  Boolean?
  action_coselec   String?         @db.VarChar(255)
  etat             String?         @db.VarChar(255)
  structure        main_structure? @relation(fields: [id_structure_tp], references: [id_structure_tp], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_structure_tp")

  @@unique([id_poste_conum, id_structure_tp, id_cn], map: "uq_id_poste_cn_strcuture")
  @@schema("main")
}

model main_structure {
  id                                                                                   Int                           @id @default(autoincrement())
  siret                                                                                String?                       @db.VarChar(15)
  rna                                                                                  String?                       @db.VarChar(10)
  nom                                                                                  String?                       @db.VarChar(255)
  code_activite_principale                                                             String?                       @db.VarChar(6)
  original_created_at                                                                  DateTime?                     @db.Timestamp(6)
  created_at                                                                           DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                                                                           DateTime?                     @db.Timestamp(6)
  adresse_id                                                                           Int?
  id_structure_ac                                                                      String?                       @unique(map: "structure_id_structure_ac_unique") @db.Uuid
  categorie_juridique                                                                  String?                       @db.VarChar(4)
  nb_mandats_ac                                                                        Int?
  structure_id_coop                                                                    String?                       @unique(map: "structure_id_structure_coop_unique") @db.Uuid
  etat_administratif                                                                   String?                       @db.VarChar
  denomination_sirene                                                                  String?                       @db.VarChar
  id_structure_tp                                                                      Int?                          @unique(map: "uq_id_structure_tp")
  publique                                                                             Boolean?
  visible_pour_cartographie_nationale                                                  Boolean?
  structure_cartographie_nationale_id                                                  String?                       @db.VarChar(255)
  typologies                                                                           String[]
  presentation_resume                                                                  String?                       @db.VarChar(500)
  presentation_detail                                                                  String?
  contact                                                                              Json?
  horaires                                                                             String?                       @db.VarChar
  prise_rdv                                                                            String?                       @db.VarChar
  structure_parente                                                                    String?                       @db.Uuid
  services                                                                             String[]
  publics_specifiquement_adresses                                                      String[]
  prise_en_charge_specifique                                                           String[]
  frais_a_charge                                                                       String[]
  dispositif_programmes_nationaux                                                      String[]
  formations_labels                                                                    String[]
  autres_formations_labels                                                             String[]
  itinerance                                                                           String[]
  modalites_acces                                                                      String[]
  modalites_accompagnement                                                             String[]
  mediateurs_en_activite                                                               Int?
  emplois                                                                              Int?
  personne_personne_id_structure_tpTostructure                                         personne[]                    @relation("personne_id_structure_tpTostructure")
  personne_personne_id_structure_acTostructure                                         personne[]                    @relation("personne_id_structure_acTostructure")
  personne_lieux_activites_personne_lieux_activites_structure_idTostructure            personne_lieux_activites[]    @relation("personne_lieux_activites_structure_idTostructure") @ignore
  personne_lieux_activites_personne_lieux_activites_structure_id_coopTostructure       personne_lieux_activites[]    @relation("personne_lieux_activites_structure_id_coopTostructure") @ignore
  personne_structures_emplois_personne_structures_emplois_structure_idTostructure      personne_structures_emplois[] @relation("personne_structures_emplois_structure_idTostructure") @ignore
  personne_structures_emplois_personne_structures_emplois_structure_id_coopTostructure personne_structures_emplois[] @relation("personne_structures_emplois_structure_id_coopTostructure") @ignore
  poste                                                                                poste[]
  adresse                                                                              adresse?                      @relation(fields: [adresse_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "structure_adresse_fkey")
  categories_juridiques                                                                categories_juridiques?        @relation(fields: [categorie_juridique], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "structure_categorie_juridique")

  @@unique([siret, nom, adresse_id], map: "structure_ukey")
  @@map("structure")
  @@schema("main")
}

model action {
  id                    Int                    @id @default(autoincrement())
  besoins               String[]
  createur_id           Int
  nom                   String
  contexte              String
  description           String
  budget_global         Float
  feuille_de_route_id   Int
  date_de_debut         DateTime
  date_de_fin           DateTime
  creation              DateTime
  derniere_modification DateTime
  utilisateur           utilisateur            @relation(fields: [createur_id], references: [id])
  feuille_de_route      feuille_de_route       @relation(fields: [feuille_de_route_id], references: [id])
  co_financement        co_financement[]
  demande_de_subvention demande_de_subvention?
  porteur_action        porteur_action[]

  @@schema("min")
}

model beneficiaire_subvention {
  demande_de_subvention_id Int
  membre_id                String
  demande_de_subvention    demande_de_subvention @relation(fields: [demande_de_subvention_id], references: [id])
  membre                   membre                @relation(fields: [membre_id], references: [id])

  @@unique([demande_de_subvention_id, membre_id])
  @@schema("min")
}

model co_financement {
  id        Int    @id @default(autoincrement())
  id_action Int
  id_membre String
  montant   Float
  action    action @relation(fields: [id_action], references: [id])
  membre    membre @relation(fields: [id_membre], references: [id])

  @@schema("min")
}

model comite {
  id                           Int         @id @default(autoincrement())
  creation                     DateTime
  type                         String
  frequence                    String
  commentaire                  String?
  date                         DateTime?
  editeur_utilisateur_id       String
  derniere_edition             DateTime
  gouvernance_departement_code String
  utilisateur                  utilisateur @relation(fields: [editeur_utilisateur_id], references: [sso_id])
  gouvernance                  gouvernance @relation(fields: [gouvernance_departement_code], references: [departement_code])

  @@schema("min")
}

model contact_membre_gouvernance {
  email                                                       String   @id
  prenom                                                      String
  nom                                                         String
  fonction                                                    String
  membre_membre_contactTocontact_membre_gouvernance           membre[] @relation("membre_contactTocontact_membre_gouvernance")
  membre_membre_contact_techniqueTocontact_membre_gouvernance membre[] @relation("membre_contact_techniqueTocontact_membre_gouvernance")

  @@schema("min")
}

model demande_de_subvention {
  id                       Int                       @id @default(autoincrement())
  createur_id              Int
  statut                   String
  subvention_demandee      Float
  subvention_etp           Float?
  subvention_prestation    Float?
  action_id                Int                       @unique
  enveloppe_financement_id Int
  creation                 DateTime
  derniere_modification    DateTime
  beneficiaire_subvention  beneficiaire_subvention[]
  action                   action                    @relation(fields: [action_id], references: [id])
  utilisateur              utilisateur               @relation(fields: [createur_id], references: [id])
  enveloppe_financement    enveloppe_financement     @relation(fields: [enveloppe_financement_id], references: [id])

  @@schema("min")
}

model min_departement {
  code                           String                           @id
  nom                            String
  region_code                    String
  region                         min_region                       @relation(fields: [region_code], references: [code])
  departement_enveloppe          departement_enveloppe[]
  gouvernance                    gouvernance?
  membre_gouvernance_departement membre_gouvernance_departement[]
  structure                      min_structure[]
  utilisateur                    utilisateur[]

  @@map("departement")
  @@schema("min")
}

model departement_enveloppe {
  departement_code      String
  enveloppe_id          Int
  plafond               Float
  departement           min_departement       @relation(fields: [departement_code], references: [code])
  enveloppe_financement enveloppe_financement @relation(fields: [enveloppe_id], references: [id])

  @@unique([departement_code, enveloppe_id])
  @@schema("min")
}

model enveloppe_financement {
  id                    Int                     @id @default(autoincrement())
  libelle               String
  date_debut            DateTime
  date_fin              DateTime
  montant               Float
  demande_de_subvention demande_de_subvention[]
  departement_enveloppe departement_enveloppe[]

  @@schema("min")
}

model feuille_de_route {
  id                           Int         @id @default(autoincrement())
  creation                     DateTime
  nom                          String
  gouvernance_departement_code String
  porteur_id                   String?
  old_uuid                     String      @db.Uuid
  piece_jointe                 String?
  action                       action[]
  gouvernance                  gouvernance @relation(fields: [gouvernance_departement_code], references: [departement_code])
  membre                       membre?     @relation(fields: [porteur_id], references: [id])

  @@schema("min")
}

model gouvernance {
  editeur_note_privee_id                                           String?
  note_privee                                                      Json?
  derniere_edition_note_de_contexte                                DateTime?
  editeur_note_de_contexte_id                                      String?
  note_de_contexte                                                 String?
  departement_code                                                 String             @id
  comite                                                           comite[]
  feuille_de_route                                                 feuille_de_route[]
  departement                                                      min_departement    @relation(fields: [departement_code], references: [code])
  utilisateur_gouvernance_editeur_note_de_contexte_idToutilisateur utilisateur?       @relation("gouvernance_editeur_note_de_contexte_idToutilisateur", fields: [editeur_note_de_contexte_id], references: [sso_id])
  utilisateur_gouvernance_editeur_note_privee_idToutilisateur      utilisateur?       @relation("gouvernance_editeur_note_privee_idToutilisateur", fields: [editeur_note_privee_id], references: [sso_id])
  membre                                                           membre[]

  @@schema("min")
}

model groupement {
  id          Int           @id @default(autoincrement())
  nom         String
  utilisateur utilisateur[]

  @@schema("min")
}

model membre {
  id                                                                              String                           @id
  type                                                                            String?
  statut                                                                          String
  contact                                                                         String
  contact_technique                                                               String?
  gouvernance_departement_code                                                    String
  old_uuid                                                                        String                           @db.Uuid
  beneficiaire_subvention                                                         beneficiaire_subvention[]
  co_financement                                                                  co_financement[]
  feuille_de_route                                                                feuille_de_route[]
  contact_membre_gouvernance_membre_contactTocontact_membre_gouvernance           contact_membre_gouvernance       @relation("membre_contactTocontact_membre_gouvernance", fields: [contact], references: [email])
  contact_membre_gouvernance_membre_contact_techniqueTocontact_membre_gouvernance contact_membre_gouvernance?      @relation("membre_contact_techniqueTocontact_membre_gouvernance", fields: [contact_technique], references: [email])
  gouvernance                                                                     gouvernance                      @relation(fields: [gouvernance_departement_code], references: [departement_code])
  membre_gouvernance_commune                                                      membre_gouvernance_commune[]
  membre_gouvernance_departement                                                  membre_gouvernance_departement[]
  membre_gouvernance_epci                                                         membre_gouvernance_epci[]
  membre_gouvernance_sgar                                                         membre_gouvernance_sgar[]
  membre_gouvernance_structure                                                    membre_gouvernance_structure[]
  porteur_action                                                                  porteur_action[]

  @@schema("min")
}

model membre_gouvernance_commune {
  commune   String
  role      String
  membre_id String
  membre    membre @relation(fields: [membre_id], references: [id])

  @@unique([commune, membre_id, role])
  @@schema("min")
}

model membre_gouvernance_departement {
  role             String
  departement_code String
  membre_id        String
  departement      min_departement @relation(fields: [departement_code], references: [code])
  membre           membre          @relation(fields: [membre_id], references: [id])

  @@unique([departement_code, membre_id, role])
  @@schema("min")
}

model membre_gouvernance_epci {
  epci      String
  role      String
  membre_id String
  membre    membre @relation(fields: [membre_id], references: [id])

  @@id([epci, membre_id, role])
  @@schema("min")
}

model membre_gouvernance_sgar {
  role      String
  membre_id String
  sgar_code String
  membre    membre     @relation(fields: [membre_id], references: [id])
  region    min_region @relation(fields: [sgar_code], references: [code])

  @@unique([sgar_code, membre_id, role])
  @@schema("min")
}

model membre_gouvernance_structure {
  structure String
  role      String
  membre_id String
  membre    membre @relation(fields: [membre_id], references: [id])

  @@unique([structure, membre_id, role])
  @@schema("min")
}

model porteur_action {
  action_id Int
  membre_id String
  action    action @relation(fields: [action_id], references: [id])
  membre    membre @relation(fields: [membre_id], references: [id])

  @@unique([action_id, membre_id])
  @@schema("min")
}

model min_region {
  code                    String                    @id
  nom                     String
  departement             min_departement[]
  membre_gouvernance_sgar membre_gouvernance_sgar[]
  utilisateur             utilisateur[]

  @@map("region")
  @@schema("min")
}

model min_structure {
  id                        Int             @id @default(autoincrement())
  nom                       String          @db.Citext
  adresse                   String
  commune                   String
  contact                   Json
  statut                    String
  type                      String
  code_postal               String
  departement_code          String
  id_mongo                  String
  identifiant_etablissement String
  departement               min_departement @relation(fields: [departement_code], references: [code])
  utilisateur               utilisateur[]

  @@map("structure")
  @@schema("min")
}

model utilisateur {
  id                                                               Int                     @id @default(autoincrement())
  nom                                                              String                  @db.Citext
  prenom                                                           String
  role                                                             Role
  telephone                                                        String                  @db.VarChar(13)
  date_de_creation                                                 DateTime
  departement_code                                                 String?
  derniere_connexion                                               DateTime?
  email_de_contact                                                 String
  invite_le                                                        DateTime
  is_super_admin                                                   Boolean                 @default(false)
  is_supprime                                                      Boolean                 @default(false)
  region_code                                                      String?
  sso_email                                                        String                  @unique
  sso_id                                                           String                  @unique @default("")
  structure_id                                                     Int?
  groupement_id                                                    Int?
  action                                                           action[]
  comite                                                           comite[]
  demande_de_subvention                                            demande_de_subvention[]
  gouvernance_gouvernance_editeur_note_de_contexte_idToutilisateur gouvernance[]           @relation("gouvernance_editeur_note_de_contexte_idToutilisateur")
  gouvernance_gouvernance_editeur_note_privee_idToutilisateur      gouvernance[]           @relation("gouvernance_editeur_note_privee_idToutilisateur")
  departement                                                      min_departement?        @relation(fields: [departement_code], references: [code])
  groupement                                                       groupement?             @relation(fields: [groupement_id], references: [id])
  region                                                           min_region?             @relation(fields: [region_code], references: [code])
  structure                                                        min_structure?          @relation(fields: [structure_id], references: [id])

  @@schema("min")
}

model categories_juridiques {
  id         Int              @id @default(autoincrement())
  code       String           @unique(map: "categories_juridiques_ukey") @db.VarChar(4)
  nom        String           @db.VarChar(150)
  niveau     Int              @db.SmallInt
  created_at DateTime?        @default(now()) @db.Timestamp(6)
  updated_at DateTime?        @db.Timestamp(6)
  structure  main_structure[]

  @@schema("reference")
}

enum Role {
  administrateur_dispositif
  gestionnaire_departement
  gestionnaire_groupement
  gestionnaire_region
  gestionnaire_structure
  instructeur
  pilote_politique_publique
  support_animation

  @@schema("min")
}
