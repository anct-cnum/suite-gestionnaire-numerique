generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Prisma a besoin de créer une database temporaire quand on lance la migration
  // https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/shadow-database
  // Du coup, on a créée une application Scalingo qui contient qu'une database dédiée à ça
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model GroupementRecord {
  id Int @id @default(autoincrement())

  nom String

  utilisateurs UtilisateurRecord[]

  @@map("groupement")
}

model DepartementRecord {
  code       String @id
  regionCode String @map("region_code")
  nom        String

  structures   StructureRecord[]
  utilisateurs UtilisateurRecord[]

  relationRegion     RegionRecord                         @relation(fields: [regionCode], references: [code])
  gouvernances       GouvernanceRecord[]
  membresGouvernance MembreGouvernanceDepartementRecord[]

  @@map("departement")
}

model RegionRecord {
  code String @id
  nom  String

  departements       DepartementRecord[]
  utilisateurs       UtilisateurRecord[]
  membresGouvernance MembreGouvernanceSgarRecord[]

  @@map("region")
}

model StructureRecord {
  id Int @id @default(autoincrement())

  adresse                  String
  codePostal               String @map("code_postal")
  commune                  String
  /// [Contact]
  contact                  Json
  departementCode          String @map("departement_code")
  // SIRET ou RIDET
  identifiantEtablissement String @map("identifiant_etablissement")
  // TODO: à supprimer après la migration finale
  idMongo                  String @map("id_mongo")
  nom                      String @db.Citext
  statut                   String
  type                     String

  utilisateurs UtilisateurRecord[]

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])

  @@map("structure")
}

model UtilisateurRecord {
  id Int @id @default(autoincrement())

  dateDeCreation    DateTime  @map("date_de_creation")
  departementCode   String?   @map("departement_code")
  derniereConnexion DateTime? @map("derniere_connexion")
  emailDeContact    String    @map("email_de_contact")
  groupementId      Int?      @map("groupement_id")
  inviteLe          DateTime  @map("invite_le")
  isSuperAdmin      Boolean   @default(false) @map("is_super_admin")
  isSupprime        Boolean   @default(false) @map("is_supprime")
  nom               String    @db.Citext
  prenom            String
  regionCode        String?   @map("region_code")
  role              Role
  structureId       Int?      @map("structure_id")
  ssoId             String    @unique @default("") @map("sso_id")
  ssoEmail          String    @unique @map("sso_email")
  telephone         String    @db.VarChar(13)

  relationStructure   StructureRecord?   @relation(fields: [structureId], references: [id])
  relationGroupement  GroupementRecord?  @relation(fields: [groupementId], references: [id])
  relationDepartement DepartementRecord? @relation(fields: [departementCode], references: [code])
  relationRegion      RegionRecord?      @relation(fields: [regionCode], references: [code])

  comites                   ComiteRecord[]
  notesPrivees              GouvernanceRecord[]         @relation("UtilisateurNotesPrivees")
  noteDeContexte            GouvernanceRecord[]         @relation("UtilisateurnoteDeContexte")
  actionRecord              ActionRecord[]
  demandeDeSubventionRecord DemandeDeSubventionRecord[]

  @@map("utilisateur")
}

model GouvernanceRecord {
  departementCode               String    @id @map("departement_code")
  /// [NotePrivee]
  notePrivee                    Json?     @map("note_privee")
  editeurNotePriveeId           String?   @map("editeur_note_privee_id")
  noteDeContexte                String?   @map("note_de_contexte")
  editeurNoteDeContexteId       String?   @map("editeur_note_de_contexte_id")
  derniereEditionNoteDeContexte DateTime? @map("derniere_edition_note_de_contexte")

  relationDepartement           DepartementRecord  @relation(fields: [departementCode], references: [code])
  relationEditeurNotePrivee     UtilisateurRecord? @relation("UtilisateurNotesPrivees", fields: [editeurNotePriveeId], references: [ssoId])
  relationEditeurNoteDeContexte UtilisateurRecord? @relation("UtilisateurnoteDeContexte", fields: [editeurNoteDeContexteId], references: [ssoId])

  comites         ComiteRecord[]
  feuillesDeRoute FeuilleDeRouteRecord[]
  membres         MembreRecord[]

  @@map("gouvernance")
}

model ComiteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String    @map("gouvernance_departement_code")
  creation                   DateTime
  derniereEdition            DateTime  @map("derniere_edition")
  type                       String
  frequence                  String
  commentaire                String?
  date                       DateTime?
  editeurUtilisateurId       String    @map("editeur_utilisateur_id")

  relationUtilisateur UtilisateurRecord @relation(fields: [editeurUtilisateurId], references: [ssoId])
  relationGouvernance GouvernanceRecord @relation(fields: [gouvernanceDepartementCode], references: [departementCode])

  @@map("comite")
}

model FeuilleDeRouteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String   @map("gouvernance_departement_code")
  creation                   DateTime
  nom                        String
  pieceJointe                String?  @map("piece_jointe")
  porteurId                  String?  @map("porteur_id")

  oldUUID String @map("old_uuid") @db.Uuid

  relationGouvernance GouvernanceRecord @relation(fields: [gouvernanceDepartementCode], references: [departementCode])
  relationMembre      MembreRecord?     @relation(fields: [porteurId], references: [id])
  action              ActionRecord[]

  @@map("feuille_de_route")
}

model ContactMembreGouvernanceRecord {
  email String @id

  prenom   String
  nom      String
  fonction String

  membresContact          MembreRecord[] @relation("contact")
  membresContactTechnique MembreRecord[] @relation("contactTechnique")

  @@map("contact_membre_gouvernance")
}

model MembreRecord {
  id String @id

  gouvernanceDepartementCode String  @map("gouvernance_departement_code")
  contact                    String
  contactTechnique           String? @map("contact_technique")
  type                       String?
  statut                     String

  relationGouvernance      GouvernanceRecord               @relation(fields: [gouvernanceDepartementCode], references: [departementCode])
  relationContact          ContactMembreGouvernanceRecord  @relation("contact", fields: [contact], references: [email])
  relationContactTechnique ContactMembreGouvernanceRecord? @relation("contactTechnique", fields: [contactTechnique], references: [email])

  membresGouvernanceDepartement MembreGouvernanceDepartementRecord[]
  membresGouvernanceSgar        MembreGouvernanceSgarRecord[]
  membresGouvernanceEpci        MembreGouvernanceEpciRecord[]
  membresGouvernanceCommune     MembreGouvernanceCommuneRecord[]
  membresGouvernanceStructure   MembreGouvernanceStructureRecord[]
  beneficiaireSubvention        BeneficiaireSubventionRecord[]
  porteurAction                 PorteurActionRecord[]
  coFinancement                 CoFinancementRecord[]
  feuillesDeRoute               FeuilleDeRouteRecord[]

  @@map("membre")
}

model MembreGouvernanceDepartementRecord {
  departementCode String @map("departement_code")
  role            String
  membreId        String @map("membre_id")

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])
  relationMembre      MembreRecord      @relation(fields: [membreId], references: [id])

  @@unique([departementCode, membreId, role])
  @@map("membre_gouvernance_departement")
}

model MembreGouvernanceSgarRecord {
  sgarCode String @map("sgar_code")
  role     String
  membreId String @map("membre_id")

  relationSgar   RegionRecord @relation(fields: [sgarCode], references: [code])
  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([sgarCode, membreId, role])
  @@map("membre_gouvernance_sgar")
}

model MembreGouvernanceEpciRecord {
  epci     String
  role     String
  membreId String @map("membre_id")

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@id([epci, membreId, role])
  @@map("membre_gouvernance_epci")
}

model MembreGouvernanceCommuneRecord {
  commune  String
  role     String
  membreId String @map("membre_id")

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([commune, membreId, role])
  @@map("membre_gouvernance_commune")
}

model MembreGouvernanceStructureRecord {
  structure String
  role      String
  membreId  String @map("membre_id")

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([structure, membreId, role])
  @@map("membre_gouvernance_structure")
}

model ActionRecord {
  id           Int      @id @default(autoincrement())
  besoins      String[]
  createurId   Int      @map("createur_id")
  nom          String
  contexte     String
  description  String
  budgetGlobal Float    @map("budget_global")

  feuilleDeRouteId Int      @map("feuille_de_route_id")
  dateDeDebut      DateTime @map("date_de_debut")
  dateDeFin        DateTime @map("date_de_fin")

  utilisateur          UtilisateurRecord           @relation(fields: [createurId], references: [id])
  feuilleDeRoute       FeuilleDeRouteRecord        @relation(fields: [feuilleDeRouteId], references: [id])
  demandesDeSubvention DemandeDeSubventionRecord[]
  porteurAction        PorteurActionRecord[]
  coFinancement        CoFinancementRecord[]

  @@map("action")
}

model DemandeDeSubventionRecord {
  id                     Int       @id @default(autoincrement())
  createurId             Int       @map("createur_id")
  statut                 String
  subventionDemandee     Float     @map("subvention_demandee")
  subventionEtp          Float?    @map("subvention_etp")
  subventionPrestation   Float?    @map("subvention_prestation")
  dateDeModification     DateTime? @map("date_de_modification")
  actionId               Int       @unique @map("action_id")
  enveloppeFinancementId Int       @map("enveloppe_financement_id")

  utilisateur  UtilisateurRecord              @relation(fields: [createurId], references: [id])
  action       ActionRecord                   @relation(fields: [actionId], references: [id])
  enveloppe    EnveloppeFinancementRecord     @relation(fields: [enveloppeFinancementId], references: [id])
  beneficiaire BeneficiaireSubventionRecord[]

  @@map("demande_de_subvention")
}

model BeneficiaireSubventionRecord {
  id                    Int    @id @default(autoincrement())
  demandeDeSubventionId Int    @map("demande_de_subvention_id")
  membreId              String @map("membre_id")
  montantSubvention     Float  @map("montant_subvention")

  demandeDeSubvention DemandeDeSubventionRecord @relation(fields: [demandeDeSubventionId], references: [id])
  membre              MembreRecord              @relation(fields: [membreId], references: [id])

  @@map("beneficiaire_subvention")
}

model PorteurActionRecord {
  id       Int    @id @default(autoincrement())
  actionId Int    @map("action_id")
  membreId String @map("membre_id")

  action ActionRecord @relation(fields: [actionId], references: [id])
  membre MembreRecord @relation(fields: [membreId], references: [id])

  @@map("porteur_action")
}

model EnveloppeFinancementRecord {
  id          Int      @id @default(autoincrement())
  libelle     String
  dateDeDebut DateTime @map("date_debut")
  dateDeFin   DateTime @map("date_fin")
  montant     Float

  demandeDeSubvention DemandeDeSubventionRecord[]

  @@map("enveloppe_financement")
}

model CoFinancementRecord {
  id       Int    @id @default(autoincrement())
  libelle  String
  actionId Int    @map("id_action")
  memberId String @map("id_membre")
  montant  Float

  action ActionRecord @relation(fields: [actionId], references: [id])
  membre MembreRecord @relation(fields: [memberId], references: [id])

  @@map("co_financement")
}

enum Role {
  administrateur_dispositif
  gestionnaire_departement
  gestionnaire_groupement
  gestionnaire_region
  gestionnaire_structure
  instructeur
  pilote_politique_publique
  support_animation
}
