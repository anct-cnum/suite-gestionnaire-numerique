generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["admin", "main", "min", "reference"]
}

model GroupementRecord {
  id Int @id @default(autoincrement())

  nom String

  utilisateurs UtilisateurRecord[]

  @@map("groupement")
  @@schema("min")
}

model DepartementRecord {
  code       String @id
  regionCode String @map("region_code")
  nom        String

  structures   StructureRecord[]
  utilisateurs UtilisateurRecord[]

  relationRegion         RegionRecord                         @relation(fields: [regionCode], references: [code])
  gouvernances           GouvernanceRecord[]
  departementsEnveloppes DepartementEnveloppeRecord[]

  @@map("departement")
  @@schema("min")
}

model RegionRecord {
  code String @id
  nom  String

  departements       DepartementRecord[]
  utilisateurs       UtilisateurRecord[]

  @@map("region")
  @@schema("min")
}

model StructureRecord {
  id Int @id @default(autoincrement())

  adresse                  String
  codePostal               String @map("code_postal")
  commune                  String
  /// [Contact]
  contact                  Json
  departementCode          String @map("departement_code")
  // SIRET ou RIDET
  identifiantEtablissement String @map("identifiant_etablissement")
  // TODO: à supprimer après la migration finale
  idMongo                  String @map("id_mongo")
  nom                      String @db.Citext
  statut                   String
  type                     String

  utilisateurs UtilisateurRecord[]

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])

  @@map("structure")
  @@schema("min")
}

model UtilisateurRecord {
  id Int @id @default(autoincrement())

  dateDeCreation    DateTime  @map("date_de_creation")
  departementCode   String?   @map("departement_code")
  derniereConnexion DateTime? @map("derniere_connexion")
  emailDeContact    String    @map("email_de_contact")
  groupementId      Int?      @map("groupement_id")
  inviteLe          DateTime  @map("invite_le")
  isSuperAdmin      Boolean   @default(false) @map("is_super_admin")
  isSupprime        Boolean   @default(false) @map("is_supprime")
  nom               String    @db.Citext
  prenom            String
  regionCode        String?   @map("region_code")
  role              Role
  structureId       Int?      @map("structure_id")
  ssoId             String    @unique @default("") @map("sso_id")
  ssoEmail          String    @unique @map("sso_email")
  telephone         String    @db.VarChar(13)

  relationStructure   StructureRecord?   @relation(fields: [structureId], references: [id])
  relationGroupement  GroupementRecord?  @relation(fields: [groupementId], references: [id])
  relationDepartement DepartementRecord? @relation(fields: [departementCode], references: [code])
  relationRegion      RegionRecord?      @relation(fields: [regionCode], references: [code])

  comites                   ComiteRecord[]
  notesPrivees              GouvernanceRecord[]         @relation("UtilisateurNotesPrivees")
  noteDeContexte            GouvernanceRecord[]         @relation("UtilisateurnoteDeContexte")
  actionRecord              ActionRecord[]
  demandeDeSubventionRecord DemandeDeSubventionRecord[]
  FeuilleDeRouteRecord      FeuilleDeRouteRecord[]

  @@map("utilisateur")
  @@schema("min")
}

model GouvernanceRecord {
  departementCode               String    @id @map("departement_code")
  /// [NotePrivee]
  notePrivee                    Json?     @map("note_privee")
  editeurNotePriveeId           String?   @map("editeur_note_privee_id")
  noteDeContexte                String?   @map("note_de_contexte")
  editeurNoteDeContexteId       String?   @map("editeur_note_de_contexte_id")
  derniereEditionNoteDeContexte DateTime? @map("derniere_edition_note_de_contexte")

  relationDepartement           DepartementRecord  @relation(fields: [departementCode], references: [code])
  relationEditeurNotePrivee     UtilisateurRecord? @relation("UtilisateurNotesPrivees", fields: [editeurNotePriveeId], references: [ssoId])
  relationEditeurNoteDeContexte UtilisateurRecord? @relation("UtilisateurnoteDeContexte", fields: [editeurNoteDeContexteId], references: [ssoId])

  comites         ComiteRecord[]
  feuillesDeRoute FeuilleDeRouteRecord[]
  membres         MembreRecord[]

  @@map("gouvernance")
  @@schema("min")
}

model ComiteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String    @map("gouvernance_departement_code")
  creation                   DateTime
  derniereEdition            DateTime  @map("derniere_edition")
  type                       String
  frequence                  String
  commentaire                String?
  date                       DateTime?
  editeurUtilisateurId       String    @map("editeur_utilisateur_id")

  relationUtilisateur UtilisateurRecord @relation(fields: [editeurUtilisateurId], references: [ssoId])
  relationGouvernance GouvernanceRecord @relation(fields: [gouvernanceDepartementCode], references: [departementCode])

  @@map("comite")
  @@schema("min")
}

model FeuilleDeRouteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String    @map("gouvernance_departement_code")
  creation                   DateTime
  derniereEdition            DateTime? @map("derniere_edition")
  nom                        String
  noteDeContextualisation    String?   @map("note_de_contextualisation")
  pieceJointe                String?   @map("piece_jointe")
  porteurId                  String?   @map("porteur_id")
  editeurUtilisateurId       String?   @map("editeur_utilisateur_id")
  perimetreGeographique      String?   @map("perimetre_geographique")

  oldUUID String? @map("old_uuid") @db.Uuid

  relationUtilisateur UtilisateurRecord? @relation(fields: [editeurUtilisateurId], references: [ssoId])
  relationGouvernance GouvernanceRecord  @relation(fields: [gouvernanceDepartementCode], references: [departementCode])
  relationMembre      MembreRecord?      @relation(fields: [porteurId], references: [id])
  action              ActionRecord[]

  @@map("feuille_de_route")
  @@schema("min")
}

model ContactMembreGouvernanceRecord {
  email String @id

  prenom   String
  nom      String
  fonction String

  membresContact          MembreRecord[] @relation("contact")
  membresContactTechnique MembreRecord[] @relation("contactTechnique")

  @@map("contact_membre_gouvernance")
  @@schema("min")
}

model MembreRecord {
  id String @id

  gouvernanceDepartementCode String  @map("gouvernance_departement_code")
  contact                    String
  contactTechnique           String? @map("contact_technique")
  type                       String?
  statut                     String
  isCoporteur                Boolean  @default(false) @map("is_coporteur")
  categorieMembre            String?  @map("categorie_membre")

  oldUUID String @map("old_uuid") @db.Uuid

  relationGouvernance      GouvernanceRecord               @relation(fields: [gouvernanceDepartementCode], references: [departementCode])
  relationContact          ContactMembreGouvernanceRecord  @relation("contact", fields: [contact], references: [email])
  relationContactTechnique ContactMembreGouvernanceRecord? @relation("contactTechnique", fields: [contactTechnique], references: [email])

  FeuilleDeRouteRecord               FeuilleDeRouteRecord[]
  BeneficiaireSubventionRecord       BeneficiaireSubventionRecord[]
  PorteurActionRecord                PorteurActionRecord[]
  CoFinancementRecord                CoFinancementRecord[]

  @@map("membre")
  @@schema("min")
}

model ActionRecord {
  id           Int      @id @default(autoincrement())
  besoins      String[]
  createurId   Int      @map("createur_id")
  nom          String
  contexte     String
  description  String
  budgetGlobal Float    @map("budget_global")

  feuilleDeRouteId Int      @map("feuille_de_route_id")
  dateDeDebut      DateTime @map("date_de_debut")
  dateDeFin        DateTime @map("date_de_fin")

  creation             DateTime @map("creation")
  derniereModification DateTime @map("derniere_modification")

  utilisateur          UtilisateurRecord           @relation(fields: [createurId], references: [id])
  feuilleDeRoute       FeuilleDeRouteRecord        @relation(fields: [feuilleDeRouteId], references: [id])
  demandesDeSubvention DemandeDeSubventionRecord[]
  porteurAction        PorteurActionRecord[]
  coFinancement        CoFinancementRecord[]

  @@map("action")
  @@schema("min")
}

model DemandeDeSubventionRecord {
  id                     Int    @id @default(autoincrement())
  createurId             Int    @map("createur_id")
  statut                 String
  subventionDemandee     Float  @map("subvention_demandee")
  subventionEtp          Float? @map("subvention_etp")
  subventionPrestation   Float? @map("subvention_prestation")
  actionId               Int    @unique @map("action_id")
  enveloppeFinancementId Int    @map("enveloppe_financement_id")

  creation             DateTime @map("creation")
  derniereModification DateTime @map("derniere_modification")

  utilisateur  UtilisateurRecord              @relation(fields: [createurId], references: [id])
  action       ActionRecord                   @relation(fields: [actionId], references: [id])
  enveloppe    EnveloppeFinancementRecord     @relation(fields: [enveloppeFinancementId], references: [id])
  beneficiaire BeneficiaireSubventionRecord[]

  @@map("demande_de_subvention")
  @@schema("min")
}

model BeneficiaireSubventionRecord {
  demandeDeSubventionId Int    @map("demande_de_subvention_id")
  membreId              String @map("membre_id")

  demandeDeSubvention DemandeDeSubventionRecord @relation(fields: [demandeDeSubventionId], references: [id])
  membre              MembreRecord              @relation(fields: [membreId], references: [id])

  @@unique([demandeDeSubventionId, membreId])
  @@map("beneficiaire_subvention")
  @@schema("min")
}

model PorteurActionRecord {
  actionId Int    @map("action_id")
  membreId String @map("membre_id")

  action ActionRecord @relation(fields: [actionId], references: [id])
  membre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([actionId, membreId])
  @@map("porteur_action")
  @@schema("min")
}

model EnveloppeFinancementRecord {
  id          Int      @id @default(autoincrement())
  libelle     String
  dateDeDebut DateTime @map("date_debut")
  dateDeFin   DateTime @map("date_fin")
  montant     Float

  demandesDeSubvention   DemandeDeSubventionRecord[]
  departementsEnveloppes DepartementEnveloppeRecord[]

  @@map("enveloppe_financement")
  @@schema("min")
}

model CoFinancementRecord {
  id       Int    @id @default(autoincrement())
  actionId Int    @map("id_action")
  memberId String @map("id_membre")
  montant  Float

  action ActionRecord @relation(fields: [actionId], references: [id])
  membre MembreRecord @relation(fields: [memberId], references: [id])

  @@map("co_financement")
  @@schema("min")
}

model DepartementEnveloppeRecord {
  departementCode String @map("departement_code")
  enveloppeId     Int    @map("enveloppe_id")
  plafond         Float

  relationDepartement DepartementRecord          @relation(fields: [departementCode], references: [code])
  relationEnveloppe   EnveloppeFinancementRecord @relation(fields: [enveloppeId], references: [id])

  @@unique([departementCode, enveloppeId])
  @@map("departement_enveloppe")
  @@schema("min")
}

enum Role {
  administrateur_dispositif
  gestionnaire_departement
  gestionnaire_groupement
  gestionnaire_region
  gestionnaire_structure
  instructeur
  pilote_politique_publique
  support_animation

  @@schema("min")
}

model commune {
  id             Int                     @id @default(autoincrement())
  geom           Unsupported("geometry")
  departement_id Int
  statut         String?                 @db.VarChar(24)
  code_insee     String                  @unique(map: "commune_ukey") @db.VarChar(5)
  nom            String                  @db.VarChar(50)
  population     Int?
  created_at     DateTime?               @default(now()) @db.Timestamp(6)
  updated_at     DateTime?               @db.Timestamp(6)
  departement    admin_departement       @relation(fields: [departement_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_departement_id")
  commune_epci   commune_epci[]
  zonage         zonage[]

  @@index([geom], type: Gist)
  @@index([nom])
  @@schema("admin")
}

model commune_epci {
  id         Int       @id @default(autoincrement())
  commune_id Int
  epci_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  commune    commune   @relation(fields: [commune_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_epci_commune_id")
  epci       epci      @relation(fields: [epci_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commune_epci_epci_id")

  @@unique([commune_id, epci_id], map: "commune_epci_ukey")
  @@schema("admin")
}

model admin_departement {
  id         Int                     @id @default(autoincrement())
  geom       Unsupported("geometry")
  region_id  Int
  code       String                  @unique(map: "departement_ukey") @db.VarChar(3)
  nom        String                  @db.VarChar(30)
  created_at DateTime?               @default(now()) @db.Timestamp(6)
  updated_at DateTime?               @db.Timestamp(6)
  commune    commune[]
  region     admin_region            @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "departement_region_id")

  @@map("departement")
  @@schema("admin")
}

model epci {
  id           Int                     @id @default(autoincrement())
  geom         Unsupported("geometry")
  code         String                  @unique(map: "epci_ukey") @db.VarChar(9)
  type         String                  @db.VarChar(32)
  nom          String                  @db.VarChar(90)
  created_at   DateTime?               @default(now()) @db.Timestamp(6)
  updated_at   DateTime?               @db.Timestamp(6)
  commune_epci commune_epci[]

  @@schema("admin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model IfnCommune {
  id         Int       @id @default(autoincrement())
  codeInsee  String    @map("code_insee") @db.VarChar(5)
  score      Decimal?  @db.Decimal
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)

  @@index([codeInsee])
  @@map("ifn_commune")
  @@schema("admin")
}

model insee_cp {
  id          Int       @id @default(autoincrement())
  code_insee  String    @db.VarChar(5)
  code_postal String    @db.VarChar(5)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  @@unique([code_postal, code_insee], map: "insee_cp_ukey")
  @@schema("admin")
}

model insee_historique {
  id                 Int       @id @default(autoincrement())
  code_insee_ancien  String    @db.VarChar(5)
  code_insee_nouveau String    @db.VarChar(5)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)

  @@unique([code_insee_ancien, code_insee_nouveau], map: "insee_historique_ukey")
  @@schema("admin")
}

model admin_region {
  id          Int                     @id @default(autoincrement())
  geom        Unsupported("geometry")
  code        String                  @unique(map: "region_ukey") @db.VarChar(2)
  nom         String                  @db.VarChar(35)
  created_at  DateTime?               @default(now()) @db.Timestamp(6)
  updated_at  DateTime?               @db.Timestamp(6)
  departement admin_departement[]

  @@map("region")
  @@schema("admin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model zonage {
  id          Int                      @id @default(autoincrement())
  code        String?                  @unique(map: "zonage_code_ukey") @db.VarChar(8)
  libelle     String?                  @db.VarChar(255)
  code_insee  String                   @db.VarChar(5)
  type        String                   @db.VarChar(3)
  commentaire String?
  geom        Unsupported("geometry")?
  created_at  DateTime?                @default(now()) @db.Timestamp(6)
  updated_at  DateTime?                @db.Timestamp(6)
  commune     commune                  @relation(fields: [code_insee], references: [code_insee], onDelete: NoAction, onUpdate: NoAction)

  @@index([code_insee])
  @@index([geom], type: Gist)
  @@schema("admin")
}

model activites_coop {
  id                                  Int       @id @default(autoincrement())
  type                                String    @db.VarChar(100)
  structure_id_coop                   String?   @db.Uuid
  coop_id                             String?   @unique(map: "activites_coop_unique_coop_id") @db.Uuid
  personne_id                         Int
  mediateur_id_coop                   String    @db.Uuid
  date                                DateTime  @db.Timestamp(6)
  duree                               Int
  lieu_code_insee                     String?   @db.VarChar(20)
  creation_coop                       DateTime? @db.Timestamp(6)
  modification_coop                   DateTime? @db.Timestamp(6)
  type_lieu                           String    @db.VarChar(100)
  autonomie                           String?   @db.VarChar(100)
  structure_de_redirection            String?   @db.VarChar(255)
  oriente_vers_structure              Boolean?
  precisions_demarche                 String?
  degre_de_finalisation_demarche      String?   @db.VarChar(50)
  titre_atelier                       String?   @db.VarChar(255)
  niveau_atelier                      String?   @db.VarChar(50)
  accompagnements                     Int       @default(0)
  thematiques                         String[]
  materiels                           String[]
  thematiques_demarche_administrative String[]
  created_at                          DateTime? @default(now()) @db.Timestamp(6)
  updated_at                          DateTime? @db.Timestamp(6)
  personne                            personne  @relation(fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")

  @@schema("main")
}

model adresse {
  id                      Int                      @id @default(autoincrement())
  geom                    Unsupported("geometry")?
  clef_interop            String?                  @unique(map: "adresse_clef_interop_ukey") @db.VarChar(50)
  code_ban                String?                  @unique(map: "adresse_code_ban_ukey") @db.Uuid
  departement             String?                  @db.VarChar(3)
  code_postal             String?                  @db.VarChar(5)
  code_insee              String?                  @db.VarChar(5)
  nom_commune             String?                  @db.VarChar(255)
  nom_voie                String?                  @db.VarChar(255)
  repetition              String?                  @db.VarChar(10)
  numero_voie             Int?                     @db.SmallInt
  additional_address_info Json?
  created_at              DateTime?                @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                @db.Timestamp(6)
  structure               main_structure[]

  @@index([geom], type: Gist)
  @@index([clef_interop])
  @@index([code_ban])
  @@schema("main")
}

model coordination_mediation {
  id                                                             Int       @id @default(autoincrement())
  coordinateur_id                                                Int
  mediateur_id                                                   Int
  coordination_id_coop                                           String    @db.Uuid
  mediateur_id_coop                                              String    @db.Uuid
  en_cours                                                       Boolean?
  created_at                                                     DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                                     DateTime? @db.Timestamp(6)
  personne_coordination_mediation_coordinateur_idTopersonne      personne  @relation("coordination_mediation_coordinateur_idTopersonne", fields: [coordinateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_coodinateur_id")
  personne_coordination_mediation_coordination_id_coopTopersonne personne  @relation("coordination_mediation_coordination_id_coopTopersonne", fields: [coordination_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_coordination_id_coop")
  personne_coordination_mediation_mediateur_idTopersonne         personne  @relation("coordination_mediation_mediateur_idTopersonne", fields: [mediateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id")
  personne_coordination_mediation_mediateur_id_coopTopersonne    personne  @relation("coordination_mediation_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")

  @@schema("main")
}

model personne {
  id                                                                                  Int                           @id @default(autoincrement())
  prenom                                                                              String?                       @db.VarChar(50)
  nom                                                                                 String?                       @db.VarChar(50)
  emails                                                                              Json?
  telephone                                                                           String?                       @db.VarChar(20)
  id_aidant_connect                                                                   String?                       @unique(map: "unique_id_aidant_connect") @db.VarChar(50)
  id_conseiller_numerique                                                             String?                       @unique(map: "unique_id_conseiller_numerique") @db.VarChar(50)
  id_cn_pg                                                                            Int?                          @unique(map: "uq_id_cn_pg")
  id_structure_tp                                                                     Int?
  is_active_ac                                                                        Boolean?
  formation_fne_ac                                                                    Boolean?
  profession_ac                                                                       String?                       @db.VarChar
  nb_accompagnements_ac                                                               Int?
  id_structure_ac                                                                     String?                       @db.Uuid
  coop_id                                                                             String?                       @unique @db.Uuid
  is_coordinateur                                                                     Boolean?
  is_mediateur                                                                        Boolean?
  original_created_at                                                                 DateTime?                     @db.Timestamp(6)
  created_at                                                                          DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                                                                          DateTime?                     @db.Timestamp(6)
  activites_coop                                                                      activites_coop[]
  coordination_mediation_coordination_mediation_coordinateur_idTopersonne             coordination_mediation[]      @relation("coordination_mediation_coordinateur_idTopersonne")
  coordination_mediation_coordination_mediation_coordination_id_coopTopersonne        coordination_mediation[]      @relation("coordination_mediation_coordination_id_coopTopersonne")
  coordination_mediation_coordination_mediation_mediateur_idTopersonne                coordination_mediation[]      @relation("coordination_mediation_mediateur_idTopersonne")
  coordination_mediation_coordination_mediation_mediateur_id_coopTopersonne           coordination_mediation[]      @relation("coordination_mediation_mediateur_id_coopTopersonne")
  structure_personne_id_structure_tpTostructure                                       main_structure?               @relation("personne_id_structure_tpTostructure", fields: [id_structure_tp], references: [id_structure_tp], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_structure_tp")
  structure_personne_id_structure_acTostructure                                       main_structure?               @relation("personne_id_structure_acTostructure", fields: [id_structure_ac], references: [id_structure_ac], onDelete: NoAction, onUpdate: NoAction)
  personne_lieux_activites_personne_lieux_activites_mediateur_id_coopTopersonne       personne_lieux_activites[]    @relation("personne_lieux_activites_mediateur_id_coopTopersonne")
  personne_lieux_activites_personne_lieux_activites_personne_idTopersonne             personne_lieux_activites[]    @relation("personne_lieux_activites_personne_idTopersonne")
  personne_structures_emplois_personne_structures_emplois_mediateur_id_coopTopersonne personne_structures_emplois[] @relation("personne_structures_emplois_mediateur_id_coopTopersonne")
  personne_structures_emplois_personne_structures_emplois_personne_idTopersonne       personne_structures_emplois[] @relation("personne_structures_emplois_personne_idTopersonne")

  @@schema("main")
}

model personne_lieux_activites {
  id                                                            Int       @id @default(autoincrement())
  personne_id                                                   Int
  structure_id                                                  Int?
  structure_id_coop                                             String?   @db.Uuid
  mediateur_id_coop                                             String    @db.Uuid
  en_cours                                                      Boolean?
  created_at                                                    DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                                    DateTime? @db.Timestamp(6)
  personne_personne_lieux_activites_mediateur_id_coopTopersonne personne  @relation("personne_lieux_activites_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")
  personne_personne_lieux_activites_personne_idTopersonne       personne  @relation("personne_lieux_activites_personne_idTopersonne", fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")

  @@schema("main")
}

model personne_structures_emplois {
  id                                                               Int       @id @default(autoincrement())
  personne_id                                                      Int
  structure_id                                                     Int?
  structure_id_coop                                                String?   @db.Uuid
  mediateur_id_coop                                                String    @db.Uuid
  en_cours                                                         Boolean?
  created_at                                                       DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                                       DateTime? @db.Timestamp(6)
  personne_personne_structures_emplois_mediateur_id_coopTopersonne personne  @relation("personne_structures_emplois_mediateur_id_coopTopersonne", fields: [mediateur_id_coop], references: [coop_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mediateur_id_coop")
  personne_personne_structures_emplois_personne_idTopersonne       personne  @relation("personne_structures_emplois_personne_idTopersonne", fields: [personne_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_personne_id")

  @@schema("main")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model poste {
  id               Int             @id @default(autoincrement())
  id_poste_conum   Int             @unique(map: "poste_unique_id_poste_conum")
  id_structure_tp  Int?
  id_cn            Int?
  typologie        String?         @db.VarChar(255)
  date_attribution DateTime        @db.Timestamp(6)
  date_rendu_poste DateTime?       @db.Timestamp(6)
  poste_renouvele  Boolean?
  action_coselec   String?         @db.VarChar(255)
  etat             String?         @db.VarChar(255)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @db.Timestamp(6)
  structure        main_structure? @relation(fields: [id_structure_tp], references: [id_structure_tp], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_structure_tp")

  @@unique([id_poste_conum, id_structure_tp, id_cn], map: "uq_id_poste_cn_strcuture")
  @@schema("main")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model main_structure {
  id                                           Int                    @id @default(autoincrement())
  adresse_id                                   Int?
  siret                                        String?                @db.VarChar(14)
  rna                                          String?                @db.VarChar(10)
  nom                                          String?                @db.VarChar(255)
  etat_administratif                           String?                @db.VarChar
  denomination_sirene                          String?                @db.VarChar
  code_activite_principale                     String?                @db.VarChar(6)
  categorie_juridique                          String?                @db.VarChar(4)
  structure_id_coop                            String?                @unique(map: "structure_structure_id_coop_ukey") @db.Uuid
  nb_mandats_ac                                Int?
  id_structure_ac                              String?                @unique(map: "structure_id_structure_ac_ukey") @db.Uuid
  contact                                      Json?
  id_structure_tp                              Int?                   @unique(map: "structure_id_structure_tp_ukey")
  publique                                     Boolean?
  visible_pour_cartographie_nationale          Boolean?
  structure_cartographie_nationale_id          String?                @db.VarChar
  typologies                                   String[]
  presentation_resume                          String?                @db.VarChar(500)
  presentation_detail                          String?
  horaires                                     String?                @db.VarChar
  prise_rdv                                    String?                @db.VarChar
  structure_parente                            String?                @db.Uuid
  services                                     String[]
  publics_specifiquement_adresses              String[]
  prise_en_charge_specifique                   String[]
  frais_a_charge                               String[]
  dispositif_programmes_nationaux              String[]
  formations_labels                            String[]
  autres_formations_labels                     String[]
  itinerance                                   String[]
  modalites_acces                              String[]
  modalites_accompagnement                     String[]
  mediateurs_en_activite                       Int?
  emplois                                      Int?
  original_created_at                          DateTime?              @db.Timestamp(6)
  source                                       String?                @db.VarChar
  created_at                                   DateTime?              @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime?              @db.Timestamp(6)
  personne_personne_id_structure_tpTostructure personne[]             @relation("personne_id_structure_tpTostructure")
  personne_personne_id_structure_acTostructure personne[]             @relation("personne_id_structure_acTostructure")
  poste                                        poste[]
  adresse                                      adresse?               @relation(fields: [adresse_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "structure_adresse_fkey")
  categories_juridiques                        categories_juridiques? @relation(fields: [categorie_juridique], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "structure_categorie_juridique_fkey")

  @@unique([siret, nom, adresse_id], map: "structure_ukey")
  @@map("structure")
  @@schema("main")
}

model categories_juridiques {
  id         Int              @id @default(autoincrement())
  code       String           @unique(map: "categories_juridiques_ukey") @db.VarChar(4)
  nom        String           @db.VarChar(150)
  niveau     Int              @db.SmallInt
  created_at DateTime?        @default(now()) @db.Timestamp(6)
  updated_at DateTime?        @db.Timestamp(6)
  structure  main_structure[]

  @@schema("reference")
}
