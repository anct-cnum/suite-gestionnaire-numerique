generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Prisma a besoin de créer une database temporaire quand on lance la migration
  // https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/shadow-database
  // Du coup, on a créée une application Scalingo qui contient qu'une database dédiée à ça
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model GroupementRecord {
  id Int @id @default(autoincrement())

  nom String

  utilisateurs UtilisateurRecord[]

  @@map("groupement")
}

model DepartementRecord {
  code       String @id
  regionCode String
  nom        String

  structures   StructureRecord[]
  utilisateurs UtilisateurRecord[]

  relationRegion     RegionRecord                         @relation(fields: [regionCode], references: [code])
  gouvernances       GouvernanceRecord[]
  membresGouvernance MembreGouvernanceDepartementRecord[]

  @@map("departement")
}

model RegionRecord {
  code String @id
  nom  String

  departements       DepartementRecord[]
  utilisateurs       UtilisateurRecord[]
  membresGouvernance MembreGouvernanceSgarRecord[]

  @@map("region")
}

model StructureRecord {
  id Int @id @default(autoincrement())

  adresse                  String
  codePostal               String
  commune                  String
  /// [Contact]
  contact                  Json
  departementCode          String
  // SIRET ou RIDET
  identifiantEtablissement String
  // TODO: à supprimer après la migration finale
  idMongo                  String
  nom                      String @db.Citext
  statut                   String
  type                     String

  utilisateurs UtilisateurRecord[]

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])

  @@map("structure")
}

model UtilisateurRecord {
  id Int @id @default(autoincrement())

  dateDeCreation    DateTime
  departementCode   String?
  derniereConnexion DateTime?
  emailDeContact    String
  groupementId      Int?
  inviteLe          DateTime
  isSuperAdmin      Boolean   @default(false)
  isSupprime        Boolean   @default(false)
  nom               String    @db.Citext
  prenom            String
  regionCode        String?
  role              Role
  structureId       Int?
  ssoId             String    @unique @default("")
  ssoEmail          String    @unique
  telephone         String    @db.VarChar(13)

  relationStructure   StructureRecord?   @relation(fields: [structureId], references: [id])
  relationGroupement  GroupementRecord?  @relation(fields: [groupementId], references: [id])
  relationDepartement DepartementRecord? @relation(fields: [departementCode], references: [code])
  relationRegion      RegionRecord?      @relation(fields: [regionCode], references: [code])

  comites        ComiteRecord[]
  notesPrivees   GouvernanceRecord[] @relation("UtilisateurNotesPrivees")
  noteDeContexte GouvernanceRecord[] @relation("UtilisateurnoteDeContexte")

  @@map("utilisateur")
}

model GouvernanceRecord {
  departementCode               String    @id
  /// [NotePrivee]
  notePrivee                    Json?     @map("note_privee")
  editeurNotePriveeId           String?   @map("editeur_note_privee_id")
  noteDeContexte                String?   @map("note_de_contexte")
  editeurNoteDeContexteId       String?   @map("editeur_note_de_contexte_id")
  derniereEditionNoteDeContexte DateTime? @map("derniere_edition_note_de_contexte")

  relationDepartement           DepartementRecord  @relation(fields: [departementCode], references: [code])
  relationEditeurNotePrivee     UtilisateurRecord? @relation("UtilisateurNotesPrivees", fields: [editeurNotePriveeId], references: [ssoId])
  relationEditeurNoteDeContexte UtilisateurRecord? @relation("UtilisateurnoteDeContexte", fields: [editeurNoteDeContexteId], references: [ssoId])

  comites         ComiteRecord[]
  feuillesDeRoute FeuilleDeRouteRecord[]
  membres         MembreRecord[]

  @@map("gouvernance")
}

model ComiteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String
  creation                   DateTime
  derniereEdition            DateTime
  type                       String
  frequence                  String
  commentaire                String?
  date                       DateTime?
  editeurUtilisateurId       String    @map("editeur_utilisateur_id")

  relationUtilisateur UtilisateurRecord @relation(fields: [editeurUtilisateurId], references: [ssoId])
  relationGouvernance GouvernanceRecord @relation(fields: [gouvernanceDepartementCode], references: [departementCode])

  @@map("comite")
}

model FeuilleDeRouteRecord {
  id Int @id @default(autoincrement())

  gouvernanceDepartementCode String
  creation                   DateTime
  nom                        String

  relationGouvernance GouvernanceRecord @relation(fields: [gouvernanceDepartementCode], references: [departementCode])

  @@map("feuille_de_route")
}

model ContactMembreGouvernanceRecord {
  email String @id

  prenom   String
  nom      String
  fonction String

  membresContact          MembreRecord[] @relation("contact")
  membresContactTechnique MembreRecord[] @relation("contactTechnique")

  @@map("contact_membre_gouvernance")
}

model MembreRecord {
  id String @id

  gouvernanceDepartementCode String
  contact                    String?
  contactTechnique           String?
  type                       String?
  statut                     String

  relationGouvernance      GouvernanceRecord               @relation(fields: [gouvernanceDepartementCode], references: [departementCode])
  relationContact          ContactMembreGouvernanceRecord? @relation("contact", fields: [contact], references: [email])
  relationContactTechnique ContactMembreGouvernanceRecord? @relation("contactTechnique", fields: [contactTechnique], references: [email])

  membresGouvernanceDepartement MembreGouvernanceDepartementRecord[]
  membresGouvernanceSgar        MembreGouvernanceSgarRecord[]
  membresGouvernanceEpci        MembreGouvernanceEpciRecord[]
  membresGouvernanceCommune     MembreGouvernanceCommuneRecord[]
  membresGouvernanceStructure   MembreGouvernanceStructureRecord[]

  @@map("membre")
}

model MembreGouvernanceDepartementRecord {
  departementCode String
  role            String
  membreId        String

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])
  relationMembre      MembreRecord      @relation(fields: [membreId], references: [id])

  @@unique([departementCode, membreId, role])
  @@map("membre_gouvernance_departement")
}

model MembreGouvernanceSgarRecord {
  sgarCode String
  role     String
  membreId String

  relationSgar   RegionRecord @relation(fields: [sgarCode], references: [code])
  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([sgarCode, membreId, role])
  @@map("membre_gouvernance_sgar")
}

model MembreGouvernanceEpciRecord {
  epci     String
  role     String
  membreId String

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@id([epci, membreId, role])
  @@map("membre_gouvernance_epci")
}

model MembreGouvernanceCommuneRecord {
  commune  String
  role     String
  membreId String

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([commune, membreId, role])
  @@map("membre_gouvernance_commune")
}

model MembreGouvernanceStructureRecord {
  structure String
  role      String
  membreId  String

  relationMembre MembreRecord @relation(fields: [membreId], references: [id])

  @@unique([structure, membreId, role])
  @@map("membre_gouvernance_structure")
}

enum Role {
  administrateur_dispositif
  gestionnaire_departement
  gestionnaire_groupement
  gestionnaire_region
  gestionnaire_structure
  instructeur
  pilote_politique_publique
  support_animation
}
