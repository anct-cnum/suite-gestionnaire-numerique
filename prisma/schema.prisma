generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  // Prisma a besoin de créer une database temporaire quand on lance la migration
  // https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/shadow-database
  // Du coup, on a créée une application Scalingo qui contient qu'une database dédiée à ça
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model GroupementRecord {
  id Int @id @default(autoincrement())

  nom String

  utilisateurs UtilisateurRecord[]

  @@map("groupement")
}

model DepartementRecord {
  code String @id
  regionCode String
  nom String

  structures StructureRecord[]
  utilisateurs UtilisateurRecord[]

  relationRegion RegionRecord @relation(fields: [regionCode], references: [code])

  @@map("departement")
}

model RegionRecord {
  code String @id
  nom String

  departements DepartementRecord[]
  utilisateurs UtilisateurRecord[]

  @@map("region")
}

model StructureRecord {
  id Int @id @default(autoincrement())

  adresse String
  codePostal String
  commune String
  /// [Contact]
  contact Json
  departementCode String
  // SIRET ou RIDET
  identifiantEtablissement String
  // TODO: à supprimer après la migration finale
  idMongo String
  nom String @db.Citext
  statut String
  type String

  utilisateurs UtilisateurRecord[]

  relationDepartement DepartementRecord @relation(fields: [departementCode], references: [code])

  @@map("structure")
}

model UtilisateurRecord {
  id Int @id @default(autoincrement())

  dateDeCreation DateTime
  departementCode String?
  derniereConnexion DateTime?
  emailDeContact String
  groupementId Int?
  inviteLe DateTime
  isSuperAdmin Boolean @default(false)
  isSupprime Boolean @default(false)
  nom String @db.Citext
  prenom String
  regionCode String?
  role Role
  structureId Int?
  ssoId String @unique @default("")
  ssoEmail String @unique
  telephone String @db.VarChar(13)

  relationStructure StructureRecord? @relation(fields: [structureId], references: [id])
  relationGroupement GroupementRecord? @relation(fields: [groupementId], references: [id])
  relationDepartement DepartementRecord? @relation(fields: [departementCode], references: [code])
  relationRegion RegionRecord? @relation(fields: [regionCode], references: [code])

  @@map("utilisateur")
}

enum Role {
  administrateur_dispositif
  gestionnaire_departement
  gestionnaire_groupement
  gestionnaire_region
  gestionnaire_structure
  instructeur
  pilote_politique_publique
  support_animation
}
